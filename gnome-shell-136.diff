diff --git a/js/ui/workspace.js b/js/ui/workspace.js
index 9c58861449e80aaa5bed5a075b7ccd378f9ccdac..bf444203bf47cf5e4ef8d8ea6a277bb6c828e591 100644
--- a/js/ui/workspace.js
+++ b/js/ui/workspace.js
@@ -443,6 +443,8 @@ var WindowOverlay = class {
         this._windowClone = windowClone;
         this._parentActor = parentActor;
         this._hidden = false;
+        this._forceHiddenAnimating = false;
+        this._forceHiddenDragging = false;
 
         this._idleHideOverlayId = 0;
 
@@ -450,7 +452,8 @@ var WindowOverlay = class {
         this.border = new St.Bin({ style_class: 'window-clone-border' });
 
         this.title = new St.Label({ style_class: 'window-caption',
-                                    text: this._getCaption() });
+                                    text: this._getCaption(),
+                                    reactive: true });
         this.title.clutter_text.ellipsize = Pango.EllipsizeMode.END;
         windowClone.actor.label_actor = this.title;
 
@@ -458,7 +461,7 @@ var WindowOverlay = class {
 
         this._updateCaptionId = metaWindow.connect('notify::title', w => {
             this.title.text = this._getCaption();
-            this.relayout(false);
+            this.relayout();
         });
 
         this.closeButton = new St.Button({ style_class: 'window-close' });
@@ -468,14 +471,10 @@ var WindowOverlay = class {
         this.closeButton.connect('clicked', () => this._windowClone.deleteAll());
 
         windowClone.actor.connect('destroy', this._onDestroy.bind(this));
-        windowClone.connect('show-chrome', this._onShowChrome.bind(this));
+        windowClone.connect('show-chrome', () => this.show(true));
         windowClone.connect('hide-chrome', this._onHideChrome.bind(this));
 
-        this.title.hide();
-        this.closeButton.hide();
-
         // Don't block drop targets
-        Shell.util_set_hidden_from_pick(this.title, true);
         Shell.util_set_hidden_from_pick(this.border, true);
 
         parentActor.add_actor(this.border);
@@ -494,17 +493,90 @@ var WindowOverlay = class {
             this._onStyleChanged();
     }
 
-    hide() {
-        this._hidden = true;
+    show(animate) {
+        if (!this._hidden || this._forceHiddenAnimating || this._forceHiddenDragging)
+            return;
 
-        this.hideOverlay();
-    }
+        this._parentActor.raise_top();
+
+        let toShow = [this.border, this.title];
+        if (this._windowCanClose())
+            toShow.push(this.closeButton);
 
-    show() {
         this._hidden = false;
 
-        if (this._windowClone.actor['has-pointer'])
-            this._animateVisible();
+        if (animate) {
+            toShow.forEach(e => {
+                e.opacity = 0;
+                e.show();
+                Tweener.addTween(e,
+                                 { opacity: 255,
+                                   time: WINDOW_OVERLAY_FADE_TIME,
+                                   transition: 'easeOutQuad' });
+            });
+        } else {
+            toShow.forEach(e => {
+                e.opacity = 255;
+                e.show();
+            });
+        }
+
+        this.emit('chrome-visible');
+    }
+
+    hide(animate) {
+        if (this._hidden)
+            return;
+
+        if (this._idleHideOverlayId > 0) {
+            Mainloop.source_remove(this._idleHideOverlayId);
+            this._idleHideOverlayId = 0;
+        }
+
+        let toHide = [this.closeButton, this.border, this.title];
+
+        if (animate) {
+            toHide.forEach(e => {
+                e.opacity = 255;
+                Tweener.addTween(e,
+                                 { opacity: 0,
+                                   time: WINDOW_OVERLAY_FADE_TIME,
+                                   transition: 'easeInQuad',
+                                   onComplete: () => {
+                                       e.hide();
+                                       this._hidden = true;
+                                   }
+                                 });
+            });
+        } else {
+            toHide.forEach(e => {
+                e.opacity = 0;
+                e.hide();
+            });
+            this._hidden = true;
+        }
+    }
+
+    forceHideAnimating(hide) {
+        if (hide) {
+            this._forceHiddenAnimating = true;
+            this.hide();
+        } else {
+            this._forceHiddenAnimating = false;
+            if (this._windowClone.actor['has-pointer'])
+                this.show();
+        }
+    }
+
+    forceHideDragging(hide) {
+        if (hide) {
+            this._forceHiddenDragging = true;
+            this.hide();
+        } else {
+            this._forceHiddenDragging = false;
+            if (this._windowClone.actor['has-pointer'])
+                this.show();
+        }
     }
 
     chromeHeights() {
@@ -529,9 +601,10 @@ var WindowOverlay = class {
         let title = this.title;
         let border = this.border;
 
-        Tweener.removeTweens(button);
-        Tweener.removeTweens(border);
-        Tweener.removeTweens(title);
+        // Only remove relayout tweens, not ones for fading
+        Tweener.removeTweens(button, "x", "y", "width", "height");
+        Tweener.removeTweens(title, "x", "y", "width", "height");
+        Tweener.removeTweens(border, "x", "y", "width", "height");
 
         let [cloneX, cloneY, cloneWidth, cloneHeight] = this._windowClone.slot;
 
@@ -626,70 +699,24 @@ var WindowOverlay = class {
         this.border.destroy();
     }
 
-    _animateVisible() {
-        this._parentActor.raise_top();
-
-        let toAnimate = [this.border, this.title];
-        if (this._windowCanClose())
-            toAnimate.push(this.closeButton);
-
-        toAnimate.forEach(a => {
-            a.show();
-            a.opacity = 0;
-            Tweener.addTween(a,
-                             { opacity: 255,
-                               time: WINDOW_OVERLAY_FADE_TIME,
-                               transition: 'easeOutQuad' });
-        });
-    }
-
-    _animateInvisible() {
-        [this.closeButton, this.border, this.title].forEach(a => {
-            a.opacity = 255;
-            Tweener.addTween(a,
-                             { opacity: 0,
-                               time: WINDOW_OVERLAY_FADE_TIME,
-                               transition: 'easeInQuad' });
-        });
-    }
-
-    _onShowChrome() {
-        // We might get enter events on the clone while the overlay is
-        // hidden, e.g. during animations, we ignore these events,
-        // as the close button will be shown as needed when the overlays
-        // are shown again
-        if (this._hidden)
-            return;
-
-        this._animateVisible();
-        this.emit('chrome-visible');
-    }
-
     _onHideChrome() {
-        if (this._idleHideOverlayId == 0) {
-            this._idleHideOverlayId = Mainloop.timeout_add(WINDOW_OVERLAY_IDLE_HIDE_TIMEOUT, this._idleHideOverlay.bind(this));
-            GLib.Source.set_name_by_id(this._idleHideOverlayId, '[gnome-shell] this._idleHideOverlay');
-        }
-    }
+        if (this._idleHideOverlayId > 0)
+            Mainloop.source_remove(this._idleHideOverlayId);
 
-    _idleHideOverlay() {
-        this._idleHideOverlayId = 0;
+        this._idleHideOverlayId = Mainloop.timeout_add(WINDOW_OVERLAY_IDLE_HIDE_TIMEOUT, () => {
+            if (this.closeButton['has-pointer'] ||
+                this.title['has-pointer'])
+                return GLib.SOURCE_CONTINUE;
 
-        if (!this._windowClone.actor['has-pointer'] &&
-            !this.closeButton['has-pointer'])
-            this._animateInvisible();
+            this._idleHideOverlayId = 0;
 
-        return GLib.SOURCE_REMOVE;
-    }
+            if (!this._windowClone.actor['has-pointer'])
+                this.hide(true);
 
-    hideOverlay() {
-        if (this._idleHideOverlayId > 0) {
-            Mainloop.source_remove(this._idleHideOverlayId);
-            this._idleHideOverlayId = 0;
-        }
-        this.closeButton.hide();
-        this.border.hide();
-        this.title.hide();
+            return GLib.SOURCE_REMOVE;
+        });
+
+        GLib.Source.set_name_by_id(this._idleHideOverlayId, '[gnome-shell] this._idleHideOverlay');
     }
 
     _onStyleChanged() {
@@ -1142,6 +1169,15 @@ var Workspace = class {
                                                               this._windowEnteredMonitor.bind(this));
         this._windowLeftMonitorId = global.display.connect('window-left-monitor',
                                                            this._windowLeftMonitor.bind(this));
+
+        let disableOverlays = () => this._windowOverlays.forEach(o => o.forceHideDragging(true));
+        let enableOverlays = () => this._windowOverlays.forEach(o => o.forceHideDragging(false));
+
+        this._windowDragBeginId = Main.overview.connect('window-drag-begin', disableOverlays);
+        this._windowDragEndId = Main.overview.connect('window-drag-end', enableOverlays);
+        this._itemDragBeginId = Main.overview.connect('item-drag-begin', disableOverlays);
+        this._itemDragEndId = Main.overview.connect('item-drag-end', enableOverlays);
+
         this._repositionWindowsId = 0;
 
         this.leavingOverview = false;
@@ -1307,9 +1343,6 @@ var Workspace = class {
                 area.x + area.width - cloneCenter);
             clone.overlay.setMaxChromeWidth(Math.round(maxChromeWidth));
 
-            if (clone.overlay && (initialPositioning || !clone.positioned))
-                clone.overlay.hide();
-
             if (!clone.positioned) {
                 // This window appeared after the overview was already up
                 // Grow the clone from the center of the slot
@@ -1342,13 +1375,15 @@ var Workspace = class {
 
                 this._animateClone(clone, clone.overlay, x, y, scale);
             } else {
+                clone.overlay.forceHideAnimating(true);
+
                 // cancel any active tweens (otherwise they might override our changes)
                 Tweener.removeTweens(clone.actor);
                 clone.actor.set_position(x, y);
                 clone.actor.set_scale(scale, scale);
                 clone.actor.set_opacity(255);
-                clone.overlay.relayout(false);
-                this._showWindowOverlay(clone, clone.overlay);
+                clone.overlay.relayout();
+                clone.overlay.forceHideAnimating(false);
             }
         }
     }
@@ -1374,6 +1409,8 @@ var Workspace = class {
     }
 
     _animateClone(clone, overlay, x, y, scale) {
+        overlay.forceHideAnimating(true);
+
         Tweener.addTween(clone.actor,
                          { x: x,
                            y: y,
@@ -1381,20 +1418,10 @@ var Workspace = class {
                            scale_y: scale,
                            time: Overview.ANIMATION_TIME,
                            transition: 'easeOutQuad',
-                           onComplete: () => {
-                               this._showWindowOverlay(clone, overlay);
-                           }
+                           onComplete: () => overlay.forceHideAnimating(false)
                          });
 
-        clone.overlay.relayout(true);
-    }
-
-    _showWindowOverlay(clone, overlay) {
-        if (clone.inDrag)
-            return;
-
-        if (overlay && overlay._hidden)
-                overlay.show();
+        clone.overlay.relayout();
     }
 
     _delayedWindowRepositioning() {
@@ -1525,7 +1552,7 @@ var Workspace = class {
 
             clone.actor.set_position(x, y);
             clone.actor.set_scale(scale, scale);
-            clone.overlay.relayout(false);
+            clone.overlay.relayout();
         }
 
         this._currentLayout = null;
@@ -1773,6 +1800,11 @@ var Workspace = class {
         global.display.disconnect(this._windowEnteredMonitorId);
         global.display.disconnect(this._windowLeftMonitorId);
 
+        Main.overview.disconnect(this._windowDragBeginId);
+        Main.overview.disconnect(this._windowDragEndId);
+        Main.overview.disconnect(this._itemDragBeginId);
+        Main.overview.disconnect(this._itemDragEndId);
+
         if (this._repositionWindowsId > 0) {
             Mainloop.source_remove(this._repositionWindowsId);
             this._repositionWindowsId = 0;
@@ -1824,14 +1856,12 @@ var Workspace = class {
                       this._onCloneSelected.bind(this));
         clone.connect('drag-begin', () => {
             Main.overview.beginWindowDrag(clone.metaWindow);
-            overlay.hide();
         });
         clone.connect('drag-cancelled', () => {
             Main.overview.cancelledWindowDrag(clone.metaWindow);
         });
         clone.connect('drag-end', () => {
             Main.overview.endWindowDrag(clone.metaWindow);
-            overlay.show();
         });
         clone.connect('size-changed', () => {
             this._recalculateWindowPositions(WindowPositionFlags.NONE);
@@ -1849,7 +1879,7 @@ var Workspace = class {
 
             this._windowOverlays.forEach(o => {
                 if (o != overlay)
-                    o.hideOverlay();
+                    o.hide();
             });
         });
 
