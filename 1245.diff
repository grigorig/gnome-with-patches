diff --git a/js/gdm/loginDialog.js b/js/gdm/loginDialog.js
index 0ee51e637137c8a5421860b2f6d2916ca8ce84be..4246b8616f3c4cb0eb3699679c87d220620dd5bf 100644
--- a/js/gdm/loginDialog.js
+++ b/js/gdm/loginDialog.js
@@ -589,8 +589,8 @@ var LoginDialog = GObject.registerClass({
         return actorBox;
     }
 
-    vfunc_allocate(dialogBox, flags) {
-        this.set_allocation(dialogBox, flags);
+    vfunc_allocate(dialogBox) {
+        this.set_allocation(dialogBox);
 
         let themeNode = this.get_theme_node();
         dialogBox = themeNode.get_content_box(dialogBox);
@@ -719,19 +719,19 @@ var LoginDialog = GObject.registerClass({
 
         // Finally hand out the allocations
         if (bannerAllocation)
-            this._bannerView.allocate(bannerAllocation, flags);
+            this._bannerView.allocate(bannerAllocation);
 
         if (authPromptAllocation)
-            this._authPrompt.allocate(authPromptAllocation, flags);
+            this._authPrompt.allocate(authPromptAllocation);
 
         if (userSelectionAllocation)
-            this._userSelectionBox.allocate(userSelectionAllocation, flags);
+            this._userSelectionBox.allocate(userSelectionAllocation);
 
         if (logoAllocation)
-            this._logoBin.allocate(logoAllocation, flags);
+            this._logoBin.allocate(logoAllocation);
 
         if (sessionMenuButtonAllocation)
-            this._sessionMenuButton.allocate(sessionMenuButtonAllocation, flags);
+            this._sessionMenuButton.allocate(sessionMenuButtonAllocation);
     }
 
     _ensureUserListLoaded() {
diff --git a/js/ui/altTab.js b/js/ui/altTab.js
index 5cebc1c83860736b44e2201ecc33ecffa086ca33..b56cc49cf92f079cc56b0539434b77bcaa54b98e 100644
--- a/js/ui/altTab.js
+++ b/js/ui/altTab.js
@@ -68,8 +68,8 @@ class AppSwitcherPopup extends SwitcherPopup.SwitcherPopup {
         this._items = this._switcherList.icons;
     }
 
-    vfunc_allocate(box, flags) {
-        super.vfunc_allocate(box, flags);
+    vfunc_allocate(box) {
+        super.vfunc_allocate(box);
 
         // Allocate the thumbnails
         // We try to avoid overflowing the screen so we base the resulting size on
@@ -102,7 +102,7 @@ class AppSwitcherPopup extends SwitcherPopup.SwitcherPopup {
             this._thumbnails.addClones(primary.y + primary.height - bottomPadding - childBox.y1);
             let [, childNaturalHeight] = this._thumbnails.get_preferred_height(-1);
             childBox.y2 = childBox.y1 + childNaturalHeight;
-            this._thumbnails.allocate(childBox, flags);
+            this._thumbnails.allocate(childBox);
         }
     }
 
@@ -749,9 +749,9 @@ class AppSwitcher extends SwitcherPopup.SwitcherList {
         return super.vfunc_get_preferred_height(forWidth);
     }
 
-    vfunc_allocate(box, flags) {
+    vfunc_allocate(box) {
         // Allocate the main list items
-        super.vfunc_allocate(box, flags);
+        super.vfunc_allocate(box);
 
         let contentBox = this.get_theme_node().get_content_box(box);
 
@@ -766,7 +766,7 @@ class AppSwitcher extends SwitcherPopup.SwitcherList {
             childBox.x2 = childBox.x1 + arrowWidth;
             childBox.y1 = contentBox.y1 + itemBox.y2 + arrowHeight;
             childBox.y2 = childBox.y1 + arrowHeight;
-            this._arrows[i].allocate(childBox, flags);
+            this._arrows[i].allocate(childBox);
         }
     }
 
@@ -1056,7 +1056,7 @@ class WindowSwitcher extends SwitcherPopup.SwitcherList {
         return [minHeight, natHeight];
     }
 
-    vfunc_allocate(box, flags) {
+    vfunc_allocate(box) {
         let themeNode = this.get_theme_node();
         let contentBox = themeNode.get_content_box(box);
         const labelHeight = this._label.height;
@@ -1064,20 +1064,20 @@ class WindowSwitcher extends SwitcherPopup.SwitcherList {
             labelHeight + themeNode.get_padding(St.Side.BOTTOM);
 
         box.y2 -= totalLabelHeight;
-        super.vfunc_allocate(box, flags);
+        super.vfunc_allocate(box);
 
         // Hooking up the parent vfunc will call this.set_allocation() with
         // the height without the label height, so call it again with the
         // correct size here.
         box.y2 += totalLabelHeight;
-        this.set_allocation(box, flags);
+        this.set_allocation(box);
 
         const childBox = new Clutter.ActorBox();
         childBox.x1 = contentBox.x1;
         childBox.x2 = contentBox.x2;
         childBox.y2 = contentBox.y2;
         childBox.y1 = childBox.y2 - labelHeight;
-        this._label.allocate(childBox, flags);
+        this._label.allocate(childBox);
     }
 
     highlight(index, justOutline) {
diff --git a/js/ui/appDisplay.js b/js/ui/appDisplay.js
index 5c44401ddaec9253d2a2b491f6b8a1db2e645ad6..311430997924ba5235de2158026c0f7cbc493010 100644
--- a/js/ui/appDisplay.js
+++ b/js/ui/appDisplay.js
@@ -1071,13 +1071,13 @@ var ViewStackLayout = GObject.registerClass({
     Signals: { 'allocated-size-changed': { param_types: [GObject.TYPE_INT,
                                                          GObject.TYPE_INT] } },
 }, class ViewStackLayout extends Clutter.BinLayout {
-    vfunc_allocate(actor, box, flags) {
+    vfunc_allocate(actor, box) {
         let availWidth = box.x2 - box.x1;
         let availHeight = box.y2 - box.y1;
         // Prepare children of all views for the upcoming allocation, calculate all
         // the needed values to adapt available size
         this.emit('allocated-size-changed', availWidth, availHeight);
-        super.vfunc_allocate(actor, box, flags);
+        super.vfunc_allocate(actor, box);
     }
 });
 
@@ -1947,7 +1947,7 @@ var AppFolderDialog = GObject.registerClass({
         }
     }
 
-    vfunc_allocate(box, flags) {
+    vfunc_allocate(box) {
         let contentBox = this.get_theme_node().get_content_box(box);
         contentBox = this._viewBox.get_theme_node().get_content_box(contentBox);
 
@@ -1960,7 +1960,7 @@ var AppFolderDialog = GObject.registerClass({
 
         this._view._grid.topPadding = 0;
 
-        super.vfunc_allocate(box, flags);
+        super.vfunc_allocate(box);
 
         // We can only start zooming after receiving an allocation
         if (this._needsZoomAndFade)
diff --git a/js/ui/barLevel.js b/js/ui/barLevel.js
index a2888aaf2661ad46482203589b5ade805c5e9f1c..f4fdb6e51a31a8e4624038bc96aeeb2e0a56ba90 100644
--- a/js/ui/barLevel.js
+++ b/js/ui/barLevel.js
@@ -30,8 +30,8 @@ var BarLevel = GObject.registerClass({
             accessible_role: Atk.Role.LEVEL_BAR,
         };
         super._init(Object.assign(defaultParams, params));
-        this.connect('allocation-changed', (actor, box) => {
-            this._barLevelWidth = box.get_width();
+        this.connect('notify::allocation', () => {
+            this._barLevelWidth = this.allocation.get_width();
         });
 
         this._customAccessible = St.GenericAccessible.new_for_actor(this);
diff --git a/js/ui/boxpointer.js b/js/ui/boxpointer.js
index 60540621d2c0040da4185efac73230d71668d861..5fe6943a95a64a0fc4567b805af1754a7f1939bc 100644
--- a/js/ui/boxpointer.js
+++ b/js/ui/boxpointer.js
@@ -196,13 +196,13 @@ var BoxPointer = GObject.registerClass({
         return themeNode.adjust_preferred_height(...height);
     }
 
-    vfunc_allocate(box, flags) {
+    vfunc_allocate(box) {
         if (this._sourceActor && this._sourceActor.mapped) {
             this._reposition(box);
             this._updateFlip(box);
         }
 
-        this.set_allocation(box, flags);
+        this.set_allocation(box);
 
         let themeNode = this.get_theme_node();
         let borderWidth = themeNode.get_length('-arrow-border-width');
@@ -214,7 +214,7 @@ var BoxPointer = GObject.registerClass({
         childBox.y1 = 0;
         childBox.x2 = availWidth;
         childBox.y2 = availHeight;
-        this._border.allocate(childBox, flags);
+        this._border.allocate(childBox);
 
         childBox.x1 = borderWidth;
         childBox.y1 = borderWidth;
@@ -234,7 +234,7 @@ var BoxPointer = GObject.registerClass({
             childBox.x2 -= rise;
             break;
         }
-        this.bin.allocate(childBox, flags);
+        this.bin.allocate(childBox);
     }
 
     _drawBorder(area) {
diff --git a/js/ui/dash.js b/js/ui/dash.js
index 60725381b3794e9cd860a430bb0d1c9959d0c195..16e797d18ffc0c3cca8003becb2fe9257ae60748 100644
--- a/js/ui/dash.js
+++ b/js/ui/dash.js
@@ -292,11 +292,11 @@ class DashActor extends St.Widget {
         });
     }
 
-    vfunc_allocate(box, flags) {
+    vfunc_allocate(box) {
         let contentBox = this.get_theme_node().get_content_box(box);
         let availWidth = contentBox.x2 - contentBox.x1;
 
-        this.set_allocation(box, flags);
+        this.set_allocation(box);
 
         let [appIcons, showAppsButton] = this.get_children();
         let [, showAppsNatHeight] = showAppsButton.get_preferred_height(availWidth);
@@ -306,11 +306,11 @@ class DashActor extends St.Widget {
         childBox.y1 = contentBox.y1;
         childBox.x2 = contentBox.x2;
         childBox.y2 = contentBox.y2 - showAppsNatHeight;
-        appIcons.allocate(childBox, flags);
+        appIcons.allocate(childBox);
 
         childBox.y1 = contentBox.y2 - showAppsNatHeight;
         childBox.y2 = contentBox.y2;
-        showAppsButton.allocate(childBox, flags);
+        showAppsButton.allocate(childBox);
     }
 
     vfunc_get_preferred_height(forWidth) {
diff --git a/js/ui/dateMenu.js b/js/ui/dateMenu.js
index 576f76c96c345296b15e9a38faa3b0764079a69a..034050d19f88914443d8026403b857d77e1c2e2f 100644
--- a/js/ui/dateMenu.js
+++ b/js/ui/dateMenu.js
@@ -565,8 +565,8 @@ class FreezableBinLayout extends Clutter.BinLayout {
         return this._savedHeight;
     }
 
-    vfunc_allocate(container, allocation, flags) {
-        super.vfunc_allocate(container, allocation, flags);
+    vfunc_allocate(container, allocation) {
+        super.vfunc_allocate(container, allocation);
 
         let [width, height] = allocation.get_size();
         this._savedWidth = [width, width];
diff --git a/js/ui/iconGrid.js b/js/ui/iconGrid.js
index 2796a661312b3826ba4dda08e0f88752e8fad33a..df2902d20deed61643eb0ef109262f3e1489961b 100644
--- a/js/ui/iconGrid.js
+++ b/js/ui/iconGrid.js
@@ -197,9 +197,9 @@ function zoomOutActorAtPos(actor, x, y) {
     });
 }
 
-function animateIconPosition(icon, box, flags, nChangedIcons) {
+function animateIconPosition(icon, box, nChangedIcons) {
     if (!icon.has_allocation() || icon.allocation.equal(box) || icon.opacity === 0) {
-        icon.allocate(box, flags);
+        icon.allocate(box);
         return false;
     }
 
@@ -207,7 +207,7 @@ function animateIconPosition(icon, box, flags, nChangedIcons) {
     icon.set_easing_mode(Clutter.AnimationMode.EASE_OUT_QUAD);
     icon.set_easing_delay(nChangedIcons * ICON_POSITION_DELAY);
 
-    icon.allocate(box, flags);
+    icon.allocate(box);
 
     icon.restore_easing_state();
 
@@ -350,8 +350,8 @@ var IconGrid = GObject.registerClass({
         return themeNode.adjust_preferred_height(height, height);
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         let themeNode = this.get_theme_node();
         box = themeNode.get_content_box(box);
@@ -397,7 +397,7 @@ var IconGrid = GObject.registerClass({
                 if (!animating)
                     children[i].opacity = 255;
 
-                if (animateIconPosition(children[i], childBox, flags, nChangedIcons))
+                if (animateIconPosition(children[i], childBox, nChangedIcons))
                     nChangedIcons++;
             }
 
@@ -855,11 +855,11 @@ class PaginatedIconGrid extends IconGrid {
         return [height, height];
     }
 
-    vfunc_allocate(box, flags) {
+    vfunc_allocate(box) {
         if (this._childrenPerPage == 0)
             log('computePages() must be called before allocate(); pagination will not work.');
 
-        this.set_allocation(box, flags);
+        this.set_allocation(box);
 
         if (this._fillParent) {
             // Reset the passed in box to fill the parent
@@ -892,7 +892,7 @@ class PaginatedIconGrid extends IconGrid {
         for (let i = 0; i < children.length; i++) {
             let childBox = this._calculateChildBox(children[i], x, y, box);
 
-            if (animateIconPosition(children[i], childBox, flags, nChangedIcons))
+            if (animateIconPosition(children[i], childBox, nChangedIcons))
                 nChangedIcons++;
 
             children[i].show();
diff --git a/js/ui/keyboard.js b/js/ui/keyboard.js
index 4af2b18c4782ac564ebd839643352859750d795e..7df7ef16dabcb039526af50f82295f98f23a30d9 100644
--- a/js/ui/keyboard.js
+++ b/js/ui/keyboard.js
@@ -61,7 +61,7 @@ class AspectContainer extends St.Widget {
         this.queue_relayout();
     }
 
-    vfunc_allocate(box, flags) {
+    vfunc_allocate(box) {
         if (box.get_width() > 0 && box.get_height() > 0) {
             let sizeRatio = box.get_width() / box.get_height();
 
@@ -79,7 +79,7 @@ class AspectContainer extends St.Widget {
             }
         }
 
-        super.vfunc_allocate(box, flags);
+        super.vfunc_allocate(box);
     }
 });
 
diff --git a/js/ui/layout.js b/js/ui/layout.js
index 53a55c7705a40f487117f91122dc15aa25dc66a1..9013aa97bd37188355f280d4136f200aa335cd65 100644
--- a/js/ui/layout.js
+++ b/js/ui/layout.js
@@ -246,7 +246,7 @@ var LayoutManager = GObject.registerClass({
                                            vertical: true });
         this.addChrome(this.panelBox, { affectsStruts: true,
                                         trackFullscreen: true });
-        this.panelBox.connect('allocation-changed',
+        this.panelBox.connect('notify::allocation',
                               this._panelBoxChanged.bind(this));
 
         this.modalDialogGroup = new St.Widget({ name: 'modalDialogGroup',
diff --git a/js/ui/lookingGlass.js b/js/ui/lookingGlass.js
index ba8872891a05908a26a33389d7aa8df943aaa824..a5d762987c987f397d68ecbd75db5d8cfc162e27 100644
--- a/js/ui/lookingGlass.js
+++ b/js/ui/lookingGlass.js
@@ -554,8 +554,8 @@ var Inspector = GObject.registerClass({
         this._lookingGlass = lookingGlass;
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         if (!this._eventHandler)
             return;
@@ -570,7 +570,7 @@ var Inspector = GObject.registerClass({
         childBox.x2 = childBox.x1 + natWidth;
         childBox.y1 = primary.y + Math.floor((primary.height - natHeight) / 2);
         childBox.y2 = childBox.y1 + natHeight;
-        this._eventHandler.allocate(childBox, flags);
+        this._eventHandler.allocate(childBox);
     }
 
     _close() {
@@ -833,9 +833,9 @@ class LookingGlass extends St.BoxLayout {
         Main.uiGroup.add_actor(this);
         Main.uiGroup.set_child_below_sibling(this,
                                              Main.layoutManager.panelBox);
-        Main.layoutManager.panelBox.connect('allocation-changed',
+        Main.layoutManager.panelBox.connect('notify::allocation',
                                             this._queueResize.bind(this));
-        Main.layoutManager.keyboardBox.connect('allocation-changed',
+        Main.layoutManager.keyboardBox.connect('notify::allocation',
                                                this._queueResize.bind(this));
 
         this._objInspector = new ObjInspector(this);
diff --git a/js/ui/messageList.js b/js/ui/messageList.js
index 46cfd811c5fb094c816b4032a5296d94f4e55608..fb94767178c3e72069560f9686423968a0f8cbd7 100644
--- a/js/ui/messageList.js
+++ b/js/ui/messageList.js
@@ -285,12 +285,12 @@ var LabelExpanderLayout = GObject.registerClass({
         return [min, nat];
     }
 
-    vfunc_allocate(container, box, flags) {
+    vfunc_allocate(container, box) {
         for (let i = 0; i < container.get_n_children(); i++) {
             let child = container.get_child_at_index(i);
 
             if (child.visible)
-                child.allocate(box, flags);
+                child.allocate(box);
         }
 
     }
diff --git a/js/ui/messageTray.js b/js/ui/messageTray.js
index 058f1ef912714ecf0c01e07d8f7e516bde42427c..718aee65719631a29ed0016f8164c3fe8db4413a 100644
--- a/js/ui/messageTray.js
+++ b/js/ui/messageTray.js
@@ -686,8 +686,8 @@ class SourceActorWithLabel extends SourceActor {
         });
     }
 
-    vfunc_allocate(box, flags) {
-        super.vfunc_allocate(box, flags);
+    vfunc_allocate(box) {
+        super.vfunc_allocate(box);
 
         let childBox = new Clutter.ActorBox();
 
@@ -707,7 +707,7 @@ class SourceActorWithLabel extends SourceActor {
         childBox.y1 = box.y2 - naturalHeight;
         childBox.y2 = box.y2;
 
-        this._counterBin.allocate(childBox, flags);
+        this._counterBin.allocate(childBox);
     }
 
     _updateCount() {
diff --git a/js/ui/overviewControls.js b/js/ui/overviewControls.js
index d1aac359373f7af4ee504e0a63b8b2631c7843b6..705e8c8d2e2112d5d8e48cd1683700b7e68978dc 100644
--- a/js/ui/overviewControls.js
+++ b/js/ui/overviewControls.js
@@ -51,7 +51,7 @@ var SlideLayout = GObject.registerClass({
         return [minWidth, natWidth];
     }
 
-    vfunc_allocate(container, box, flags) {
+    vfunc_allocate(container, box) {
         let child = container.get_first_child();
 
         let availWidth = Math.round(box.x2 - box.x1);
@@ -72,7 +72,7 @@ var SlideLayout = GObject.registerClass({
         actorBox.y1 = box.y1;
         actorBox.y2 = actorBox.y1 + availHeight;
 
-        child.allocate(actorBox, flags);
+        child.allocate(actorBox);
     }
 
     // eslint-disable-next-line camelcase
@@ -394,10 +394,10 @@ class DashSpacer extends St.Widget {
 });
 
 var ControlsLayout = GObject.registerClass({
-    Signals: { 'allocation-changed': { flags: GObject.SignalFlags.RUN_LAST } },
+    Signals: { 'allocation-changed': {} },
 }, class ControlsLayout extends Clutter.BinLayout {
-    vfunc_allocate(container, box, flags) {
-        super.vfunc_allocate(container, box, flags);
+    vfunc_allocate(container, box) {
+        super.vfunc_allocate(container, box);
         this.emit('allocation-changed');
     }
 });
diff --git a/js/ui/padOsd.js b/js/ui/padOsd.js
index c2723c0e21fb5b31fb782ba2d929e24672bdae60..f6965333571ba04b4285a541457a3d9113bbc20c 100644
--- a/js/ui/padOsd.js
+++ b/js/ui/padOsd.js
@@ -418,8 +418,8 @@ var PadDiagram = GObject.registerClass({
         child.allocate(childBox, 0);
     }
 
-    vfunc_allocate(box, flags) {
-        super.vfunc_allocate(box, flags);
+    vfunc_allocate(box) {
+        super.vfunc_allocate(box);
         this._updateDiagramScale();
 
         for (let i = 0; i < this._labels.length; i++) {
diff --git a/js/ui/panel.js b/js/ui/panel.js
index 8d9e71872dda3b04a7260e999c303ce750ab34ce..8f7dc95c04142af11d2611d51a098bab686f959b 100644
--- a/js/ui/panel.js
+++ b/js/ui/panel.js
@@ -842,8 +842,8 @@ class Panel extends St.Widget {
         return [0,  0];
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         let allocWidth = box.x2 - box.x1;
         let allocHeight = box.y2 - box.y1;
@@ -879,13 +879,13 @@ class Panel extends St.Widget {
             childBox.x2 = Math.min(Math.floor(sideWidth),
                                    leftNaturalWidth);
         }
-        this._leftBox.allocate(childBox, flags);
+        this._leftBox.allocate(childBox);
 
         childBox.x1 = Math.ceil(sideWidth);
         childBox.y1 = 0;
         childBox.x2 = childBox.x1 + centerWidth;
         childBox.y2 = allocHeight;
-        this._centerBox.allocate(childBox, flags);
+        this._centerBox.allocate(childBox);
 
         childBox.y1 = 0;
         childBox.y2 = allocHeight;
@@ -899,7 +899,7 @@ class Panel extends St.Widget {
                                    0);
             childBox.x2 = allocWidth;
         }
-        this._rightBox.allocate(childBox, flags);
+        this._rightBox.allocate(childBox);
 
         let cornerWidth, cornerHeight;
 
@@ -909,7 +909,7 @@ class Panel extends St.Widget {
         childBox.x2 = cornerWidth;
         childBox.y1 = allocHeight;
         childBox.y2 = allocHeight + cornerHeight;
-        this._leftCorner.allocate(childBox, flags);
+        this._leftCorner.allocate(childBox);
 
         [, cornerWidth] = this._rightCorner.get_preferred_width(-1);
         [, cornerHeight] = this._rightCorner.get_preferred_height(-1);
@@ -917,7 +917,7 @@ class Panel extends St.Widget {
         childBox.x2 = allocWidth;
         childBox.y1 = allocHeight;
         childBox.y2 = allocHeight + cornerHeight;
-        this._rightCorner.allocate(childBox, flags);
+        this._rightCorner.allocate(childBox);
     }
 
     _tryDragWindow(event) {
diff --git a/js/ui/panelMenu.js b/js/ui/panelMenu.js
index a5b0896c4f5e2ea52808ad39366383d6a8272149..44fd763ba1c07c0150de0769e8725aeb851ffad7 100644
--- a/js/ui/panelMenu.js
+++ b/js/ui/panelMenu.js
@@ -59,8 +59,8 @@ class ButtonBox extends St.Widget {
         return [0, 0];
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         let child = this.get_first_child();
         if (!child)
@@ -83,7 +83,7 @@ class ButtonBox extends St.Widget {
         childBox.y1 = 0;
         childBox.y2 = availHeight;
 
-        child.allocate(childBox, flags);
+        child.allocate(childBox);
     }
 
     _onDestroy() {
diff --git a/js/ui/search.js b/js/ui/search.js
index 513f0a1ed275126aff8a4616594f49c2253cb6a0..ed24f34016478d9d7ad4711a7c0eba2f1ca0280d 100644
--- a/js/ui/search.js
+++ b/js/ui/search.js
@@ -16,7 +16,7 @@ var MAX_LIST_SEARCH_RESULTS_ROWS = 5;
 
 var MaxWidthBox = GObject.registerClass(
 class MaxWidthBox extends St.BoxLayout {
-    vfunc_allocate(box, flags) {
+    vfunc_allocate(box) {
         let themeNode = this.get_theme_node();
         let maxWidth = themeNode.get_max_width();
         let availWidth = box.x2 - box.x1;
@@ -28,7 +28,7 @@ class MaxWidthBox extends St.BoxLayout {
             adjustedBox.x2 -= Math.floor(excessWidth / 2);
         }
 
-        super.vfunc_allocate(adjustedBox, flags);
+        super.vfunc_allocate(adjustedBox);
     }
 });
 
diff --git a/js/ui/status/keyboard.js b/js/ui/status/keyboard.js
index 4a83705a3d6023f1e8b1a42f48ac516cb8ac3a44..43fd89db2e4f2780dff3106a55a8878e9cb9e79a 100644
--- a/js/ui/status/keyboard.js
+++ b/js/ui/status/keyboard.js
@@ -805,8 +805,8 @@ class InputSourceIndicatorContainer extends St.Widget {
         }, [0, 0]);
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         // translate box to (0, 0)
         box.x2 -= box.x1;
@@ -815,7 +815,7 @@ class InputSourceIndicatorContainer extends St.Widget {
         box.y1 = 0;
 
         this.get_children().forEach(c => {
-            c.allocate_align_fill(box, 0.5, 0.5, false, false, flags);
+            c.allocate_align_fill(box, 0.5, 0.5, false, false);
         });
     }
 });
diff --git a/js/ui/switcherPopup.js b/js/ui/switcherPopup.js
index 1ff7f00f47ceabe0833051a934abe13e967734c2..5cc4ab2f2c1314f765210ce56059ca87fa3b0b16 100644
--- a/js/ui/switcherPopup.js
+++ b/js/ui/switcherPopup.js
@@ -66,8 +66,8 @@ var SwitcherPopup = GObject.registerClass({
         this._disableHover();
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         let childBox = new Clutter.ActorBox();
         let primary = Main.layoutManager.primaryMonitor;
@@ -84,7 +84,7 @@ var SwitcherPopup = GObject.registerClass({
         childBox.x2 = Math.min(primary.x + primary.width - rightPadding, childBox.x1 + childNaturalWidth);
         childBox.y1 = primary.y + Math.floor((primary.height - childNaturalHeight) / 2);
         childBox.y2 = childBox.y1 + childNaturalHeight;
-        this._switcherList.allocate(childBox, flags);
+        this._switcherList.allocate(childBox);
     }
 
     _initialSelection(backward, _binding) {
@@ -591,8 +591,8 @@ var SwitcherList = GObject.registerClass({
         return themeNode.adjust_preferred_height(maxChildMin, maxChildNat);
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         let contentBox = this.get_theme_node().get_content_box(box);
         let width = contentBox.x2 - contentBox.x1;
@@ -606,7 +606,7 @@ var SwitcherList = GObject.registerClass({
         let childBox = new Clutter.ActorBox();
         let scrollable = minListWidth > width;
 
-        this._scrollView.allocate(contentBox, flags);
+        this._scrollView.allocate(contentBox);
 
         let arrowWidth = Math.floor(leftPadding / 3);
         let arrowHeight = arrowWidth * 2;
@@ -614,7 +614,7 @@ var SwitcherList = GObject.registerClass({
         childBox.y1 = this.height / 2 - arrowWidth;
         childBox.x2 = childBox.x1 + arrowWidth;
         childBox.y2 = childBox.y1 + arrowHeight;
-        this._leftArrow.allocate(childBox, flags);
+        this._leftArrow.allocate(childBox);
         this._leftArrow.opacity = this._scrollableLeft && scrollable ? 255 : 0;
 
         arrowWidth = Math.floor(rightPadding / 3);
@@ -623,7 +623,7 @@ var SwitcherList = GObject.registerClass({
         childBox.y1 = this.height / 2 - arrowWidth;
         childBox.x2 = childBox.x1 + arrowWidth;
         childBox.y2 = childBox.y1 + arrowHeight;
-        this._rightArrow.allocate(childBox, flags);
+        this._rightArrow.allocate(childBox);
         this._rightArrow.opacity = this._scrollableRight && scrollable ? 255 : 0;
     }
 });
diff --git a/js/ui/unlockDialog.js b/js/ui/unlockDialog.js
index 29122ca515a9bfd7e14d8d828bda6095f3c5d410..f74f4be23927190f0dd6be78fbe260112db0b376 100644
--- a/js/ui/unlockDialog.js
+++ b/js/ui/unlockDialog.js
@@ -405,7 +405,7 @@ class UnlockDialogLayout extends Clutter.LayoutManager {
         return this._stack.get_preferred_height(forWidth);
     }
 
-    vfunc_allocate(container, box, flags) {
+    vfunc_allocate(container, box) {
         let [width, height] = box.get_size();
 
         let tenthOfHeight = height / 10.0;
@@ -432,7 +432,7 @@ class UnlockDialogLayout extends Clutter.LayoutManager {
         actorBox.x2 = columnX1 + columnWidth;
         actorBox.y2 = actorBox.y1 + maxNotificationsHeight;
 
-        this._notifications.allocate(actorBox, flags);
+        this._notifications.allocate(actorBox);
 
         // Authentication Box
         let stackY = Math.min(
@@ -444,7 +444,7 @@ class UnlockDialogLayout extends Clutter.LayoutManager {
         actorBox.x2 = columnX1 + columnWidth;
         actorBox.y2 = stackY + stackHeight;
 
-        this._stack.allocate(actorBox, flags);
+        this._stack.allocate(actorBox);
 
         // Switch User button
         if (this._switchUserButton.visible) {
@@ -461,7 +461,7 @@ class UnlockDialogLayout extends Clutter.LayoutManager {
             actorBox.x2 = actorBox.x1 + natWidth;
             actorBox.y2 = actorBox.y1 + natHeight;
 
-            this._switchUserButton.allocate(actorBox, flags);
+            this._switchUserButton.allocate(actorBox);
         }
     }
 });
diff --git a/js/ui/userWidget.js b/js/ui/userWidget.js
index c84b840cefd4998759a65ee0425f0ca99c7920e1..0f4ed089121e23f5926033cae6f23edd110c206f 100644
--- a/js/ui/userWidget.js
+++ b/js/ui/userWidget.js
@@ -144,8 +144,8 @@ class UserWidgetLabel extends St.Widget {
         }
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         let availWidth = box.x2 - box.x1;
         let availHeight = box.y2 - box.y1;
@@ -164,7 +164,7 @@ class UserWidgetLabel extends St.Widget {
         childBox.x2 = availWidth;
         childBox.y2 = availHeight;
 
-        this._currentLabel.allocate(childBox, flags);
+        this._currentLabel.allocate(childBox);
     }
 
     vfunc_paint(paintContext) {
diff --git a/js/ui/workspace.js b/js/ui/workspace.js
index 8abd4227b4b967df95e5b0fecc73106c1247bbab..5002c50788847eb7f8890159628cd25c496a4c72 100644
--- a/js/ui/workspace.js
+++ b/js/ui/workspace.js
@@ -79,7 +79,7 @@ class WindowCloneLayout extends Clutter.LayoutManager {
         return [this._boundingBox.width, this._boundingBox.width];
     }
 
-    vfunc_allocate(container, box, flags) {
+    vfunc_allocate(container, _box) {
         container.get_children().forEach(child => {
             let realWindow;
             if (child == container._windowClone)
@@ -87,8 +87,7 @@ class WindowCloneLayout extends Clutter.LayoutManager {
             else
                 realWindow = child.source;
 
-            child.allocate(this._makeBoxForWindow(realWindow.meta_window),
-                           flags);
+            child.allocate(this._makeBoxForWindow(realWindow.meta_window));
         });
     }
 });
diff --git a/js/ui/workspaceSwitcherPopup.js b/js/ui/workspaceSwitcherPopup.js
index 5b709ff417a188af17dc9264dc15cad795d2c0aa..eebf9db3b73a0da97dc8d38afe4ae315079a7d07 100644
--- a/js/ui/workspaceSwitcherPopup.js
+++ b/js/ui/workspaceSwitcherPopup.js
@@ -86,8 +86,8 @@ class WorkspaceSwitcherPopupList extends St.Widget {
             return this._getSizeForOppositeOrientation();
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         let themeNode = this.get_theme_node();
         box = themeNode.get_content_box(box);
@@ -111,7 +111,7 @@ class WorkspaceSwitcherPopupList extends St.Widget {
             } else {
                 y += this._childHeight + this._itemSpacing;
             }
-            child.allocate(childBox, flags);
+            child.allocate(childBox);
         }
     }
 });
diff --git a/js/ui/workspaceThumbnail.js b/js/ui/workspaceThumbnail.js
index 51f4275bd3928c3e9e000ec53c7c5bf3af4bbf90..5066678098668a0cde958fe90d35832d9a38b264 100644
--- a/js/ui/workspaceThumbnail.js
+++ b/js/ui/workspaceThumbnail.js
@@ -1204,8 +1204,8 @@ var ThumbnailsBox = GObject.registerClass({
         this.queue_relayout();
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         let rtl = Clutter.get_default_text_direction() == Clutter.TextDirection.RTL;
 
@@ -1299,7 +1299,7 @@ var ThumbnailsBox = GObject.registerClass({
                 childBox.x2 = x2;
                 childBox.y1 = Math.round(y);
                 childBox.y2 = Math.round(y + placeholderHeight);
-                this._dropPlaceholder.allocate(childBox, flags);
+                this._dropPlaceholder.allocate(childBox);
                 Meta.later_add(Meta.LaterType.BEFORE_REDRAW, () => {
                     this._dropPlaceholder.show();
                 });
@@ -1331,7 +1331,7 @@ var ThumbnailsBox = GObject.registerClass({
             childBox.y2 = y1 + portholeHeight;
 
             thumbnail.set_scale(roundedHScale, roundedVScale);
-            thumbnail.allocate(childBox, flags);
+            thumbnail.allocate(childBox);
 
             // We round the collapsing portion so that we don't get thumbnails resizing
             // during an animation due to differences in rounded, but leave the uncollapsed
@@ -1355,6 +1355,6 @@ var ThumbnailsBox = GObject.registerClass({
         childBox.x2 += indicatorRightFullBorder;
         childBox.y1 = indicatorY1 - indicatorTopFullBorder;
         childBox.y2 = indicatorY2 + indicatorBottomFullBorder;
-        this._indicator.allocate(childBox, flags);
+        this._indicator.allocate(childBox);
     }
 });
diff --git a/src/shell-gtk-embed.c b/src/shell-gtk-embed.c
index 8a3fbac06b9c029bf4ea559dc985a85840eeaee8..2ad18a1859eaa56219845c8f1e91ec00f20c8201 100644
--- a/src/shell-gtk-embed.c
+++ b/src/shell-gtk-embed.c
@@ -268,15 +268,14 @@ shell_gtk_embed_get_preferred_height (ClutterActor *actor,
 
 static void
 shell_gtk_embed_allocate (ClutterActor          *actor,
-                          const ClutterActorBox *box,
-                          ClutterAllocationFlags flags)
+                          const ClutterActorBox *box)
 {
   ShellGtkEmbed *embed = SHELL_GTK_EMBED (actor);
   ShellGtkEmbedPrivate *priv = shell_gtk_embed_get_instance_private (embed);
   float wx, wy;
 
   CLUTTER_ACTOR_CLASS (shell_gtk_embed_parent_class)->
-    allocate (actor, box, flags);
+    allocate (actor, box);
 
   /* Find the actor's new coordinates in terms of the stage (which is
    * priv->window's parent window.
diff --git a/src/shell-stack.c b/src/shell-stack.c
index 7f4cb5564be0d55567a3242f4177c834c81afc9a..79841e0747707c40d238b979b87a125a43612372 100644
--- a/src/shell-stack.c
+++ b/src/shell-stack.c
@@ -25,14 +25,13 @@ G_DEFINE_TYPE (ShellStack, shell_stack, ST_TYPE_WIDGET);
 
 static void
 shell_stack_allocate (ClutterActor           *self,
-                      const ClutterActorBox  *box,
-                      ClutterAllocationFlags  flags)
+                      const ClutterActorBox  *box)
 {
   StThemeNode *theme_node = st_widget_get_theme_node (ST_WIDGET (self));
   ClutterActorBox content_box;
   ClutterActor *child;
 
-  clutter_actor_set_allocation (self, box, flags);
+  clutter_actor_set_allocation (self, box);
 
   st_theme_node_get_content_box (theme_node, box, &content_box);
 
@@ -41,7 +40,7 @@ shell_stack_allocate (ClutterActor           *self,
        child = clutter_actor_get_next_sibling (child))
     {
       ClutterActorBox child_box = content_box;
-      clutter_actor_allocate (child, &child_box, flags);
+      clutter_actor_allocate (child, &child_box);
     }
 }
 
diff --git a/src/st/st-bin.c b/src/st/st-bin.c
index b9c17e59c75a5a52c6bfad32f8de941f534da800..861a49b577c4af2a418b2bd75ab64f4a6a2c6f74 100644
--- a/src/st/st-bin.c
+++ b/src/st/st-bin.c
@@ -115,12 +115,11 @@ get_align_factor (ClutterActorAlign align)
 
 static void
 st_bin_allocate (ClutterActor          *self,
-                 const ClutterActorBox *box,
-                 ClutterAllocationFlags flags)
+                 const ClutterActorBox *box)
 {
   StBinPrivate *priv = st_bin_get_instance_private (ST_BIN (self));
 
-  clutter_actor_set_allocation (self, box, flags);
+  clutter_actor_set_allocation (self, box);
 
   if (priv->child && clutter_actor_is_visible (priv->child))
     {
@@ -134,8 +133,7 @@ st_bin_allocate (ClutterActor          *self,
                                          get_align_factor (x_align),
                                          get_align_factor (y_align),
                                          x_align == CLUTTER_ACTOR_ALIGN_FILL,
-                                         y_align == CLUTTER_ACTOR_ALIGN_FILL,
-                                         flags);
+                                         y_align == CLUTTER_ACTOR_ALIGN_FILL);
     }
 }
 
diff --git a/src/st/st-drawing-area.c b/src/st/st-drawing-area.c
index 38085a9015af02696f860ad1eecbdce8cb964c24..a9daca562d410aafb8b4853a3aaae2f1b7ca8f59 100644
--- a/src/st/st-drawing-area.c
+++ b/src/st/st-drawing-area.c
@@ -77,8 +77,7 @@ draw_content (ClutterCanvas *canvas,
 
 static void
 st_drawing_area_allocate (ClutterActor          *self,
-                          const ClutterActorBox *box,
-                          ClutterAllocationFlags flags)
+                          const ClutterActorBox *box)
 {
   StThemeNode *theme_node = st_widget_get_theme_node (ST_WIDGET (self));
   ClutterContent *content = clutter_actor_get_content (self);
@@ -89,11 +88,11 @@ st_drawing_area_allocate (ClutterActor          *self,
   if (!st_widget_get_resource_scale (ST_WIDGET (self), &resource_scale))
     {
       ClutterActorBox empty = CLUTTER_ACTOR_BOX_INIT_ZERO;
-      clutter_actor_set_allocation (self, &empty, 0);
+      clutter_actor_set_allocation (self, &empty);
       return;
     }
 
-  clutter_actor_set_allocation (self, box, flags);
+  clutter_actor_set_allocation (self, box);
   st_theme_node_get_content_box (theme_node, box, &content_box);
 
   width = (int)(0.5 + content_box.x2 - content_box.x1);
diff --git a/src/st/st-entry.c b/src/st/st-entry.c
index c7050a35956b21047442ca7231de330c32bd3d74..c946ca0f9d9c9d926abd88781ecb66f6d0d46100 100644
--- a/src/st/st-entry.c
+++ b/src/st/st-entry.c
@@ -416,8 +416,7 @@ st_entry_get_preferred_height (ClutterActor *actor,
 
 static void
 st_entry_allocate (ClutterActor          *actor,
-                   const ClutterActorBox *box,
-                   ClutterAllocationFlags flags)
+                   const ClutterActorBox *box)
 {
   StEntryPrivate *priv = ST_ENTRY_PRIV (actor);
   StThemeNode *theme_node = st_widget_get_theme_node (ST_WIDGET (actor));
@@ -441,7 +440,7 @@ st_entry_allocate (ClutterActor          *actor,
       right_icon = priv->secondary_icon;
     }
 
-  clutter_actor_set_allocation (actor, box, flags);
+  clutter_actor_set_allocation (actor, box);
 
   st_theme_node_get_content_box (theme_node, box, &content_box);
 
@@ -461,7 +460,7 @@ st_entry_allocate (ClutterActor          *actor,
       icon_box.y1 = (int) (content_box.y1 + avail_h / 2 - icon_h / 2);
       icon_box.y2 = icon_box.y1 + icon_h;
 
-      clutter_actor_allocate (left_icon, &icon_box, flags);
+      clutter_actor_allocate (left_icon, &icon_box);
 
       /* reduce the size for the entry */
       child_box.x1 = MIN (child_box.x2, child_box.x1 + icon_w + priv->spacing);
@@ -478,7 +477,7 @@ st_entry_allocate (ClutterActor          *actor,
       icon_box.y1 = (int) (content_box.y1 + avail_h / 2 - icon_h / 2);
       icon_box.y2 = icon_box.y1 + icon_h;
 
-      clutter_actor_allocate (right_icon, &icon_box, flags);
+      clutter_actor_allocate (right_icon, &icon_box);
 
       /* reduce the size for the entry */
       child_box.x2 = MAX (child_box.x1, child_box.x2 - icon_w - priv->spacing);
@@ -502,7 +501,7 @@ st_entry_allocate (ClutterActor          *actor,
       hint_box.y1 = ceil (content_box.y1 + avail_h / 2 - hint_h / 2);
       hint_box.y2 = hint_box.y1 + hint_h;
 
-      clutter_actor_allocate (priv->hint_actor, &hint_box, flags);
+      clutter_actor_allocate (priv->hint_actor, &hint_box);
     }
 
   clutter_actor_get_preferred_height (priv->entry, child_box.x2 - child_box.x1,
@@ -513,7 +512,7 @@ st_entry_allocate (ClutterActor          *actor,
   child_box.y1 = (int) (content_box.y1 + avail_h / 2 - entry_h / 2);
   child_box.y2 = child_box.y1 + entry_h;
 
-  clutter_actor_allocate (priv->entry, &child_box, flags);
+  clutter_actor_allocate (priv->entry, &child_box);
 }
 
 static void
diff --git a/src/st/st-label.c b/src/st/st-label.c
index 947c8ec8613337e11ea6ec176f48d7ae6794b0ce..e09b1b0c7cb71cf87c75e2cd2b686269de2b4f7f 100644
--- a/src/st/st-label.c
+++ b/src/st/st-label.c
@@ -165,18 +165,17 @@ st_label_get_preferred_height (ClutterActor *actor,
 
 static void
 st_label_allocate (ClutterActor          *actor,
-                   const ClutterActorBox *box,
-                   ClutterAllocationFlags flags)
+                   const ClutterActorBox *box)
 {
   StLabelPrivate *priv = ST_LABEL (actor)->priv;
   StThemeNode *theme_node = st_widget_get_theme_node (ST_WIDGET (actor));
   ClutterActorBox content_box;
 
-  clutter_actor_set_allocation (actor, box, flags);
+  clutter_actor_set_allocation (actor, box);
 
   st_theme_node_get_content_box (theme_node, box, &content_box);
 
-  clutter_actor_allocate (priv->label, &content_box, flags);
+  clutter_actor_allocate (priv->label, &content_box);
 }
 
 static void
diff --git a/src/st/st-scroll-bar.c b/src/st/st-scroll-bar.c
index c4551b5e903ed8fc57adad931061006e3f4d5347..086da48f0293876122aacaad1f6a3d6c689a9d9c 100644
--- a/src/st/st-scroll-bar.c
+++ b/src/st/st-scroll-bar.c
@@ -192,8 +192,7 @@ st_scroll_bar_unmap (ClutterActor *actor)
 
 static void
 scroll_bar_allocate_children (StScrollBar           *bar,
-                              const ClutterActorBox *box,
-                              ClutterAllocationFlags flags)
+                              const ClutterActorBox *box)
 {
   StScrollBarPrivate *priv = st_scroll_bar_get_instance_private (bar);
   StThemeNode *theme_node = st_widget_get_theme_node (ST_WIDGET (bar));
@@ -207,7 +206,7 @@ scroll_bar_allocate_children (StScrollBar           *bar,
       trough_box.y1 = content_box.y1;
       trough_box.x2 = content_box.x2;
       trough_box.y2 = content_box.y2;
-      clutter_actor_allocate (priv->trough, &trough_box, flags);
+      clutter_actor_allocate (priv->trough, &trough_box);
     }
   else
     {
@@ -215,7 +214,7 @@ scroll_bar_allocate_children (StScrollBar           *bar,
       trough_box.y1 = content_box.y1;
       trough_box.x2 = content_box.x2;
       trough_box.y2 = content_box.y2;
-      clutter_actor_allocate (priv->trough, &trough_box, flags);
+      clutter_actor_allocate (priv->trough, &trough_box);
     }
 
 
@@ -274,9 +273,7 @@ scroll_bar_allocate_children (StScrollBar           *bar,
           handle_box.y2 = content_box.y2;
         }
 
-      clutter_actor_allocate (priv->handle,
-                              &handle_box,
-                              flags);
+      clutter_actor_allocate (priv->handle, &handle_box);
     }
 }
 
@@ -362,14 +359,13 @@ st_scroll_bar_get_preferred_height (ClutterActor *self,
 
 static void
 st_scroll_bar_allocate (ClutterActor          *actor,
-                        const ClutterActorBox *box,
-                        ClutterAllocationFlags flags)
+                        const ClutterActorBox *box)
 {
   StScrollBar *bar = ST_SCROLL_BAR (actor);
 
-  clutter_actor_set_allocation (actor, box, flags);
+  clutter_actor_set_allocation (actor, box);
 
-  scroll_bar_allocate_children (bar, box, flags);
+  scroll_bar_allocate_children (bar, box);
 }
 
 static void
@@ -392,7 +388,7 @@ scroll_bar_update_positions (StScrollBar *bar)
     return;
 
   clutter_actor_get_allocation_box (CLUTTER_ACTOR (bar), &box);
-  scroll_bar_allocate_children (bar, &box, CLUTTER_ALLOCATION_NONE);
+  scroll_bar_allocate_children (bar, &box);
 }
 
 static void
diff --git a/src/st/st-scroll-view.c b/src/st/st-scroll-view.c
index 04169b1a2fcf25ca8390d4cac380684602dca312..fe9bc71305d64868bdf2e768b2e5646789c81c9c 100644
--- a/src/st/st-scroll-view.c
+++ b/src/st/st-scroll-view.c
@@ -533,8 +533,7 @@ st_scroll_view_get_preferred_height (ClutterActor *actor,
 
 static void
 st_scroll_view_allocate (ClutterActor          *actor,
-                         const ClutterActorBox *box,
-                         ClutterAllocationFlags flags)
+                         const ClutterActorBox *box)
 {
   ClutterActorBox content_box, child_box;
   gfloat avail_width, avail_height, sb_width, sb_height;
@@ -543,7 +542,7 @@ st_scroll_view_allocate (ClutterActor          *actor,
   StScrollViewPrivate *priv = ST_SCROLL_VIEW (actor)->priv;
   StThemeNode *theme_node = st_widget_get_theme_node (ST_WIDGET (actor));
 
-  clutter_actor_set_allocation (actor, box, flags);
+  clutter_actor_set_allocation (actor, box);
 
   st_theme_node_get_content_box (theme_node, box, &content_box);
 
@@ -641,7 +640,7 @@ st_scroll_view_allocate (ClutterActor          *actor,
   child_box.y1 = content_box.y1;
   child_box.y2 = content_box.y2 - (hscrollbar_visible ? sb_height : 0);
 
-  clutter_actor_allocate (priv->vscroll, &child_box, flags);
+  clutter_actor_allocate (priv->vscroll, &child_box);
 
   /* Horizontal scrollbar */
   if (clutter_actor_get_text_direction (actor) == CLUTTER_TEXT_DIRECTION_RTL)
@@ -657,7 +656,7 @@ st_scroll_view_allocate (ClutterActor          *actor,
   child_box.y1 = content_box.y2 - sb_height;
   child_box.y2 = content_box.y2;
 
-  clutter_actor_allocate (priv->hscroll, &child_box, flags);
+  clutter_actor_allocate (priv->hscroll, &child_box);
 
   /* In case the scrollbar policy is NEVER or EXTERNAL or scrollbars
    * should be overlayed, we don't trim the content box allocation by
@@ -689,7 +688,7 @@ st_scroll_view_allocate (ClutterActor          *actor,
   child_box.y2 = content_box.y2 - sb_height;
 
   if (priv->child)
-    clutter_actor_allocate (priv->child, &child_box, flags);
+    clutter_actor_allocate (priv->child, &child_box);
 
   if (priv->hscrollbar_visible != hscrollbar_visible)
     {
diff --git a/src/st/st-viewport.c b/src/st/st-viewport.c
index 2ce8ef5f752b45a0978caba1a08ea24c9b64b257..0eb5a22a1ebb93f3927d26da6b97ba991ca6963c 100644
--- a/src/st/st-viewport.c
+++ b/src/st/st-viewport.c
@@ -231,8 +231,7 @@ st_viewport_dispose (GObject *object)
 
 static void
 st_viewport_allocate (ClutterActor           *actor,
-                      const ClutterActorBox  *box,
-                      ClutterAllocationFlags  flags)
+                      const ClutterActorBox  *box)
 {
   StViewport *viewport = ST_VIEWPORT (actor);
   StViewportPrivate *priv =
@@ -259,14 +258,14 @@ st_viewport_allocate (ClutterActor           *actor,
    * may not match the minimum sizes reported by the layout manager. When that
    * happens, the content box needs to be adjusted to match the reported minimum
    * sizes before being passed to clutter_layout_manager_allocate() */
-  clutter_actor_set_allocation (actor, box, flags);
+  clutter_actor_set_allocation (actor, box);
 
   content_box = viewport_box;
   content_box.x2 += MAX (0, min_width - avail_width);
   content_box.y2 += MAX (0, min_height - avail_height);
 
   clutter_layout_manager_allocate (layout, CLUTTER_CONTAINER (actor),
-                                   &content_box, flags);
+                                   &content_box);
 
   /* update adjustments for scrolling */
   if (priv->vadjustment)
diff --git a/src/st/st-widget.c b/src/st/st-widget.c
index e48f8264122441e66fc513cc0394121258ee6493..0ad93c32db142abb6f0a86d34bd7425503a4c80a 100644
--- a/src/st/st-widget.c
+++ b/src/st/st-widget.c
@@ -371,8 +371,7 @@ st_widget_get_preferred_height (ClutterActor *self,
 
 static void
 st_widget_allocate (ClutterActor          *actor,
-                    const ClutterActorBox *box,
-                    ClutterAllocationFlags flags)
+                    const ClutterActorBox *box)
 {
   StThemeNode *theme_node = st_widget_get_theme_node (ST_WIDGET (actor));
   ClutterActorBox content_box;
@@ -383,7 +382,7 @@ st_widget_allocate (ClutterActor          *actor,
    * manager, meaning that we can't modify it for children only.
    */
 
-  clutter_actor_set_allocation (actor, box, flags);
+  clutter_actor_set_allocation (actor, box);
 
   st_theme_node_get_content_box (theme_node, box, &content_box);
 
@@ -391,8 +390,7 @@ st_widget_allocate (ClutterActor          *actor,
    * currently installed layout manager */
   clutter_layout_manager_allocate (clutter_actor_get_layout_manager (actor),
                                    CLUTTER_CONTAINER (actor),
-                                   &content_box,
-                                   flags);
+                                   &content_box);
 }
 
 /**
diff --git a/tests/interactive/scroll-view-sizing.js b/tests/interactive/scroll-view-sizing.js
index dc1613d0cb0f2d991765af9985ad75bc6e4f40e7..a6c682e54620aca7ca6b4239ee2fa583f7112376 100644
--- a/tests/interactive/scroll-view-sizing.js
+++ b/tests/interactive/scroll-view-sizing.js
@@ -98,13 +98,12 @@ class FlowedBoxes extends St.Widget {
         return [height, height];
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
 	this._layoutChildren(box.x2 - box.x1,
            function(child, x1, y1, x2, y2) {
-	       child.allocate(new Clutter.ActorBox({ x1: x1, y1: y1, x2: x2, y2: y2 }),
-			      flags);
+	       child.allocate(new Clutter.ActorBox({ x1: x1, y1: y1, x2: x2, y2: y2 }));
 	   });
     }
 });
@@ -185,8 +184,8 @@ class SizingIllustrator extends St.Widget {
         return [0, 400];
     }
 
-    vfunc_allocate(box, flags) {
-        this.set_allocation(box, flags);
+    vfunc_allocate(box) {
+        this.set_allocation(box);
 
         box = this.get_theme_node().get_content_box(box);
 
@@ -194,8 +193,7 @@ class SizingIllustrator extends St.Widget {
 	let allocHeight = box.y2 - box.y1;
 
 	function alloc(child, x1, y1, x2, y2) {
-	    child.allocate(new Clutter.ActorBox({ x1: x1, y1: y1, x2: x2, y2: y2 }),
-	                   flags);
+	    child.allocate(new Clutter.ActorBox({ x1: x1, y1: y1, x2: x2, y2: y2 }));
 	}
 
 	alloc(this.child, 0, 0, this.width, this.height);
