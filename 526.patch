diff --git a/src/backends/meta-cursor.c b/src/backends/meta-cursor.c
index 8fd6a9cb157b64473cada661757f906b1a7b44ef..d4087a67f97fb6124e0d63f8f7ad1f034ef056be 100644
--- a/src/backends/meta-cursor.c
+++ b/src/backends/meta-cursor.c
@@ -43,6 +43,7 @@ typedef struct _MetaCursorSpritePrivate
 
   CoglTexture2D *texture;
   float texture_scale;
+  MetaMonitorTransform texture_transform;
   int hot_x, hot_y;
 } MetaCursorSpritePrivate;
 
@@ -110,6 +111,16 @@ meta_cursor_sprite_set_texture_scale (MetaCursorSprite *sprite,
   priv->texture_scale = scale;
 }
 
+void
+meta_cursor_sprite_set_texture_transform (MetaCursorSprite     *sprite,
+                                          MetaMonitorTransform  transform)
+{
+  MetaCursorSpritePrivate *priv =
+    meta_cursor_sprite_get_instance_private (sprite);
+
+  priv->texture_transform = transform;
+}
+
 CoglTexture *
 meta_cursor_sprite_get_cogl_texture (MetaCursorSprite *sprite)
 {
@@ -140,6 +151,15 @@ meta_cursor_sprite_get_texture_scale (MetaCursorSprite *sprite)
   return priv->texture_scale;
 }
 
+MetaMonitorTransform
+meta_cursor_sprite_get_texture_transform (MetaCursorSprite *sprite)
+{
+  MetaCursorSpritePrivate *priv =
+    meta_cursor_sprite_get_instance_private (sprite);
+
+  return priv->texture_transform;
+}
+
 void
 meta_cursor_sprite_prepare_at (MetaCursorSprite *sprite,
                                int               x,
@@ -164,6 +184,7 @@ meta_cursor_sprite_init (MetaCursorSprite *sprite)
     meta_cursor_sprite_get_instance_private (sprite);
 
   priv->texture_scale = 1.0f;
+  priv->texture_transform = META_MONITOR_TRANSFORM_NORMAL;
 }
 
 static void
diff --git a/src/backends/meta-cursor.h b/src/backends/meta-cursor.h
index ebcb8f6d4f336dcc4ec241613e13346ce2e24c26..5cac34e46ff8624f49330d1b00aff883709d9eee 100644
--- a/src/backends/meta-cursor.h
+++ b/src/backends/meta-cursor.h
@@ -22,6 +22,7 @@
 #ifndef META_CURSOR_H
 #define META_CURSOR_H
 
+#include "backends/meta-backend-types.h"
 #include "meta/common.h"
 #include "meta/boxes.h"
 
@@ -57,6 +58,9 @@ void meta_cursor_sprite_set_texture (MetaCursorSprite *sprite,
 void meta_cursor_sprite_set_texture_scale (MetaCursorSprite *sprite,
                                            float             scale);
 
+void meta_cursor_sprite_set_texture_transform (MetaCursorSprite     *sprite,
+                                               MetaMonitorTransform  transform);
+
 CoglTexture *meta_cursor_sprite_get_cogl_texture (MetaCursorSprite *sprite);
 
 void meta_cursor_sprite_get_hotspot (MetaCursorSprite *sprite,
@@ -65,6 +69,8 @@ void meta_cursor_sprite_get_hotspot (MetaCursorSprite *sprite,
 
 float meta_cursor_sprite_get_texture_scale (MetaCursorSprite *sprite);
 
+MetaMonitorTransform meta_cursor_sprite_get_texture_transform (MetaCursorSprite *sprite);
+
 gboolean meta_cursor_sprite_is_animated (MetaCursorSprite *sprite);
 
 void meta_cursor_sprite_tick_frame (MetaCursorSprite *sprite);
diff --git a/src/backends/meta-monitor-transform.c b/src/backends/meta-monitor-transform.c
index 5287e85f896cdf4666099001639f8eb9ad484a06..472006b2f0da5b6ff4abf2745fb1bfda8d62c17d 100644
--- a/src/backends/meta-monitor-transform.c
+++ b/src/backends/meta-monitor-transform.c
@@ -39,3 +39,21 @@ meta_monitor_transform_invert (MetaMonitorTransform transform)
   g_assert_not_reached ();
   return 0;
 }
+
+MetaMonitorTransform
+meta_monitor_transform_relative_transform (MetaMonitorTransform transform_a,
+                                           MetaMonitorTransform transform_b)
+{
+  MetaMonitorTransform relative_transform;
+
+  relative_transform = (transform_a + transform_b) % META_MONITOR_TRANSFORM_FLIPPED;
+  if ((meta_monitor_transform_is_flipped (transform_a) &&
+       !meta_monitor_transform_is_flipped (transform_b)) ||
+      (!meta_monitor_transform_is_flipped (transform_a) &&
+       meta_monitor_transform_is_flipped (transform_b)))
+    {
+      relative_transform += META_MONITOR_TRANSFORM_FLIPPED;
+    }
+
+  return relative_transform;
+}
diff --git a/src/backends/meta-monitor-transform.h b/src/backends/meta-monitor-transform.h
index d1c4c41a6bd2a68b24e178005595572c270b9109..f520fac7d35c2ac17a8094c08d157cc8b0af19e6 100644
--- a/src/backends/meta-monitor-transform.h
+++ b/src/backends/meta-monitor-transform.h
@@ -53,4 +53,7 @@ meta_monitor_transform_is_flipped (MetaMonitorTransform transform)
 
 MetaMonitorTransform meta_monitor_transform_invert (MetaMonitorTransform transform);
 
+MetaMonitorTransform meta_monitor_transform_relative_transform (MetaMonitorTransform transform_a,
+                                                                MetaMonitorTransform transform_b);
+
 #endif /* META_MONITOR_TRANSFORM_H */
diff --git a/src/backends/native/meta-cursor-renderer-native.c b/src/backends/native/meta-cursor-renderer-native.c
index 34e6f09c91264dd8d38f150dbd37b7bf22521843..6c0d4558bd81a34ae8f62d97148e039b33518899 100644
--- a/src/backends/native/meta-cursor-renderer-native.c
+++ b/src/backends/native/meta-cursor-renderer-native.c
@@ -110,9 +110,20 @@ typedef struct _MetaCursorNativeGpuState
   struct gbm_bo *bos[HW_CURSOR_BUFFER_COUNT];
 } MetaCursorNativeGpuState;
 
+typedef enum _MetaCursorSourceBufferType
+{
+  META_CURSOR_SOURCE_BUFFER_TYPE_NONE,
+  META_CURSOR_SOURCE_BUFFER_TYPE_SHM,
+  META_CURSOR_SOURCE_BUFFER_TYPE_EGL,
+  META_CURSOR_SOURCE_BUFFER_TYPE_XCURSOR,
+} MetaCursorSourceBufferType;
+
 typedef struct _MetaCursorNativePrivate
 {
   GHashTable *gpu_states;
+  float current_relative_scale;
+  MetaMonitorTransform current_relative_transform;
+  MetaCursorSourceBufferType source_buffer_type;
 } MetaCursorNativePrivate;
 
 static GQuark quark_cursor_renderer_native_gpu_data = 0;
@@ -282,6 +293,14 @@ set_crtc_cursor (MetaCursorRendererNative *native,
     }
 }
 
+static float
+calculate_cursor_crtc_sprite_scale (MetaCursorSprite   *cursor_sprite,
+                                    MetaLogicalMonitor *logical_monitor)
+{
+  return (meta_logical_monitor_get_scale (logical_monitor) *
+          meta_cursor_sprite_get_texture_scale (cursor_sprite));
+}
+
 typedef struct
 {
   MetaCursorRendererNative *in_cursor_renderer_native;
@@ -354,6 +373,11 @@ update_monitor_crtc_cursor (MetaMonitor         *monitor,
       MetaGpuKms *gpu_kms;
       int kms_fd;
       float crtc_cursor_x, crtc_cursor_y;
+      float cursor_crtc_scale;
+      MetaRectangle cursor_rect;
+      MetaMonitorTransform inverted_transform;
+      CoglTexture *texture;
+      int tex_width, tex_height;
 
       set_crtc_cursor (data->in_cursor_renderer_native,
                        crtc,
@@ -365,10 +389,40 @@ update_monitor_crtc_cursor (MetaMonitor         *monitor,
                        scaled_crtc_rect.origin.x) * scale;
       crtc_cursor_y = (data->in_local_cursor_rect.origin.y -
                        scaled_crtc_rect.origin.y) * scale;
+
+      texture = meta_cursor_sprite_get_cogl_texture (data->in_cursor_sprite);
+      tex_width = cogl_texture_get_width (texture);
+      tex_height = cogl_texture_get_height (texture);
+
+      if (meta_is_stage_views_scaled ())
+        {
+          cursor_crtc_scale =
+            calculate_cursor_crtc_sprite_scale (data->in_cursor_sprite,
+                                                data->in_logical_monitor);
+        }
+      else
+        {
+          cursor_crtc_scale = 1.0;
+        }
+
+      cursor_rect = (MetaRectangle) {
+        .x = crtc_cursor_x,
+        .y = crtc_cursor_y,
+        .width = roundf (tex_width * cursor_crtc_scale),
+        .height = roundf (tex_height * cursor_crtc_scale)
+      };
+
+      inverted_transform = meta_monitor_transform_invert (transform);
+      meta_rectangle_transform (&cursor_rect,
+                                inverted_transform,
+                                monitor_crtc_mode->crtc_mode->width,
+                                monitor_crtc_mode->crtc_mode->height,
+                                &cursor_rect);
+
       drmModeMoveCursor (kms_fd,
                          crtc->crtc_id,
-                         floorf (crtc_cursor_x),
-                         floorf (crtc_cursor_y));
+                         cursor_rect.x,
+                         cursor_rect.y);
 
       data->out_painted = data->out_painted || TRUE;
     }
@@ -475,8 +529,28 @@ has_valid_cursor_sprite_gbm_bo (MetaCursorSprite *cursor_sprite,
 }
 
 static gboolean
-cursor_over_transformed_logical_monitor (MetaCursorRenderer *renderer,
-                                         MetaCursorSprite   *cursor_sprite)
+is_scalable (MetaCursorSprite *cursor_sprite)
+{
+  MetaCursorNativePrivate *cursor_priv;
+
+  cursor_priv = get_cursor_priv (cursor_sprite);
+
+  switch (cursor_priv->source_buffer_type)
+    {
+    case META_CURSOR_SOURCE_BUFFER_TYPE_SHM:
+    case META_CURSOR_SOURCE_BUFFER_TYPE_XCURSOR:
+      return TRUE;
+    case META_CURSOR_SOURCE_BUFFER_TYPE_NONE:
+    case META_CURSOR_SOURCE_BUFFER_TYPE_EGL:
+      return FALSE;
+    }
+  g_assert_not_reached ();
+}
+
+static gboolean
+get_common_logical_monitors_scale (MetaCursorRenderer *renderer,
+                                   MetaCursorSprite   *cursor_sprite,
+                                   float              *scale_out)
 {
   MetaCursorRendererNative *cursor_renderer_native =
     META_CURSOR_RENDERER_NATIVE (renderer);
@@ -485,58 +559,54 @@ cursor_over_transformed_logical_monitor (MetaCursorRenderer *renderer,
   MetaBackend *backend = priv->backend;
   MetaMonitorManager *monitor_manager =
     meta_backend_get_monitor_manager (backend);
+  ClutterRect cursor_rect;
   GList *logical_monitors;
   GList *l;
-  ClutterRect cursor_rect;
+  float scale = 1.0;
+  gboolean has_visible_crtc_sprite = FALSE;
 
   cursor_rect = meta_cursor_renderer_calculate_rect (renderer, cursor_sprite);
 
   logical_monitors =
     meta_monitor_manager_get_logical_monitors (monitor_manager);
+
   for (l = logical_monitors; l; l = l->next)
     {
       MetaLogicalMonitor *logical_monitor = l->data;
-      MetaRectangle logical_monitor_layout;
-      ClutterRect logical_monitor_rect;
-      MetaMonitorTransform transform;
-      GList *monitors, *l_mon;
-
-      logical_monitor_layout =
-        meta_logical_monitor_get_layout (logical_monitor);
-      logical_monitor_rect =
-        meta_rectangle_to_clutter_rect (&logical_monitor_layout);
+      ClutterRect logical_monitor_rect =
+        meta_rectangle_to_clutter_rect (&logical_monitor->rect);
+      float tmp_scale;
 
-      if (!clutter_rect_intersection (&cursor_rect, &logical_monitor_rect,
+      if (!clutter_rect_intersection (&cursor_rect,
+                                      &logical_monitor_rect,
                                       NULL))
         continue;
 
-      monitors = meta_logical_monitor_get_monitors (logical_monitor);
-      for (l_mon = monitors; l_mon; l_mon = l_mon->next)
+      if (meta_is_stage_views_scaled ())
         {
-          MetaMonitor *monitor = l_mon->data;
-
-          transform = meta_logical_monitor_get_transform (logical_monitor);
-          /* Get transform corrected for LCD panel-orientation. */
-          transform = meta_monitor_logical_to_crtc_transform (monitor, transform);
-          if (transform != META_MONITOR_TRANSFORM_NORMAL)
-            return TRUE;
+          tmp_scale =
+            calculate_cursor_crtc_sprite_scale (cursor_sprite, logical_monitor);
+        }
+      else
+        {
+          tmp_scale = 1.0;
         }
-    }
 
-  return FALSE;
-}
+      if (has_visible_crtc_sprite && scale != tmp_scale)
+        return FALSE;
 
-static float
-calculate_cursor_crtc_sprite_scale (MetaCursorSprite   *cursor_sprite,
-                                    MetaLogicalMonitor *logical_monitor)
-{
-  return (meta_logical_monitor_get_scale (logical_monitor) *
-          meta_cursor_sprite_get_texture_scale (cursor_sprite));
+      has_visible_crtc_sprite = TRUE;
+      scale = tmp_scale;
+    }
+
+  *scale_out = scale;
+  return has_visible_crtc_sprite;
 }
 
 static gboolean
-can_draw_cursor_unscaled (MetaCursorRenderer *renderer,
-                          MetaCursorSprite   *cursor_sprite)
+get_common_logical_monitors_transform (MetaCursorRenderer   *renderer,
+                                       MetaCursorSprite     *cursor_sprite,
+                                       MetaMonitorTransform *transform_out)
 {
   MetaCursorRendererNative *cursor_renderer_native =
     META_CURSOR_RENDERER_NATIVE (renderer);
@@ -548,37 +618,38 @@ can_draw_cursor_unscaled (MetaCursorRenderer *renderer,
   ClutterRect cursor_rect;
   GList *logical_monitors;
   GList *l;
+  MetaMonitorTransform transform = META_MONITOR_TRANSFORM_NORMAL;
   gboolean has_visible_crtc_sprite = FALSE;
 
-  if (!meta_is_stage_views_scaled ())
-   return meta_cursor_sprite_get_texture_scale (cursor_sprite) == 1.0;
+  cursor_rect = meta_cursor_renderer_calculate_rect (renderer, cursor_sprite);
 
   logical_monitors =
     meta_monitor_manager_get_logical_monitors (monitor_manager);
 
-  if (!logical_monitors)
-    return FALSE;
-
-  cursor_rect = meta_cursor_renderer_calculate_rect (renderer, cursor_sprite);
-
   for (l = logical_monitors; l; l = l->next)
     {
       MetaLogicalMonitor *logical_monitor = l->data;
       ClutterRect logical_monitor_rect =
         meta_rectangle_to_clutter_rect (&logical_monitor->rect);
+      MetaMonitorTransform tmp_transform;
 
       if (!clutter_rect_intersection (&cursor_rect,
                                       &logical_monitor_rect,
                                       NULL))
         continue;
 
-      if (calculate_cursor_crtc_sprite_scale (cursor_sprite,
-                                              logical_monitor) != 1.0)
+      tmp_transform = meta_monitor_transform_relative_transform (
+        meta_logical_monitor_get_transform (logical_monitor),
+        meta_cursor_sprite_get_texture_transform (cursor_sprite));
+
+      if (has_visible_crtc_sprite && transform != tmp_transform)
         return FALSE;
 
       has_visible_crtc_sprite = TRUE;
+      transform = tmp_transform;
     }
 
+  *transform_out = transform;
   return has_visible_crtc_sprite;
 }
 
@@ -587,8 +658,10 @@ should_have_hw_cursor (MetaCursorRenderer *renderer,
                        MetaCursorSprite   *cursor_sprite,
                        GList              *gpus)
 {
-  GList *l;
   CoglTexture *texture;
+  MetaMonitorTransform transform;
+  float scale;
+  GList *l;
 
   if (!cursor_sprite)
     return FALSE;
@@ -614,14 +687,20 @@ should_have_hw_cursor (MetaCursorRenderer *renderer,
         return FALSE;
     }
 
-  if (cursor_over_transformed_logical_monitor (renderer, cursor_sprite))
-    return FALSE;
-
   texture = meta_cursor_sprite_get_cogl_texture (cursor_sprite);
   if (!texture)
     return FALSE;
 
-  if (!can_draw_cursor_unscaled (renderer, cursor_sprite))
+  if (!get_common_logical_monitors_scale (renderer, cursor_sprite, &scale))
+    return FALSE;
+
+  if (!get_common_logical_monitors_transform (renderer,
+                                              cursor_sprite,
+                                              &transform))
+    return FALSE;
+
+  if (!is_scalable (cursor_sprite) &&
+      (scale != 1.0 || transform != META_MONITOR_TRANSFORM_NORMAL))
     return FALSE;
 
   return TRUE;
@@ -863,6 +942,10 @@ ensure_cursor_priv (MetaCursorSprite *cursor_sprite)
   g_signal_connect (cursor_sprite, "texture-changed",
                     G_CALLBACK (on_cursor_sprite_texture_changed), NULL);
 
+  cursor_priv->current_relative_scale = 1.0;
+  cursor_priv->current_relative_transform = META_MONITOR_TRANSFORM_NORMAL;
+  cursor_priv->source_buffer_type = META_CURSOR_SOURCE_BUFFER_TYPE_NONE;
+
   return cursor_priv;
 }
 
@@ -931,11 +1014,14 @@ load_cursor_sprite_gbm_buffer_for_gpu (MetaCursorRendererNative *native,
 }
 
 static gboolean
-is_cursor_hw_state_valid (MetaCursorSprite *cursor_sprite,
-                          MetaGpuKms       *gpu_kms)
+is_cursor_hw_state_valid (MetaCursorRenderer *renderer,
+                          MetaCursorSprite   *cursor_sprite,
+                          MetaGpuKms         *gpu_kms)
 {
   MetaCursorNativePrivate *cursor_priv;
   MetaCursorNativeGpuState *cursor_gpu_state;
+  MetaMonitorTransform transform;
+  float scale;
 
   cursor_priv = get_cursor_priv (cursor_sprite);
   if (!cursor_priv)
@@ -945,6 +1031,20 @@ is_cursor_hw_state_valid (MetaCursorSprite *cursor_sprite,
   if (!cursor_gpu_state)
     return FALSE;
 
+  if (get_common_logical_monitors_scale (renderer, cursor_sprite, &scale))
+    {
+      if (scale != cursor_priv->current_relative_scale)
+        return FALSE;
+    }
+
+  if (get_common_logical_monitors_transform (renderer,
+                                             cursor_sprite,
+                                             &transform))
+    {
+      if (transform != cursor_priv->current_relative_transform)
+        return FALSE;
+    }
+
   switch (cursor_gpu_state->pending_bo_state)
     {
     case META_CURSOR_GBM_BO_STATE_SET:
@@ -958,6 +1058,126 @@ is_cursor_hw_state_valid (MetaCursorSprite *cursor_sprite,
   return FALSE;
 }
 
+static cairo_surface_t *
+scale_and_transform_cursor_sprite_cpu (uint8_t              *input_data,
+                                       int                   width_in,
+                                       int                   height_in,
+                                       int                   rowstride_in,
+                                       float                 scale_factor,
+                                       MetaMonitorTransform  transform)
+{
+  cairo_t *cr;
+  cairo_surface_t *source_surface;
+  cairo_surface_t *target_surface;
+  int width_out;
+  int height_out;
+
+  width_out = ceilf (width_in * scale_factor);
+  height_out = ceilf (height_in * scale_factor);
+
+  target_surface = cairo_image_surface_create (CAIRO_FORMAT_ARGB32,
+                                               width_out,
+                                               height_out);
+
+  cr = cairo_create (target_surface);
+  if (transform != META_MONITOR_TRANSFORM_NORMAL)
+    {
+      cairo_translate (cr, 0.5 * width_out, 0.5 * height_out);
+      switch (transform)
+        {
+        case META_MONITOR_TRANSFORM_90:
+          cairo_rotate (cr, M_PI * 1.5);
+          break;
+        case META_MONITOR_TRANSFORM_180:
+          cairo_rotate (cr, M_PI);
+          break;
+        case META_MONITOR_TRANSFORM_270:
+          cairo_rotate (cr, M_PI * 0.5);
+          break;
+        case META_MONITOR_TRANSFORM_FLIPPED:
+          cairo_scale (cr, 1, -1);
+          break;
+        case META_MONITOR_TRANSFORM_FLIPPED_90:
+          cairo_rotate (cr, M_PI * 1.5);
+          cairo_scale (cr, -1, 1);
+          break;
+        case META_MONITOR_TRANSFORM_FLIPPED_180:
+          cairo_rotate (cr, M_PI);
+          cairo_scale (cr, 1, -1);
+          break;
+        case META_MONITOR_TRANSFORM_FLIPPED_270:
+          cairo_rotate (cr, M_PI * 0.5);
+          cairo_scale (cr, -1, 1);
+          break;
+        case META_MONITOR_TRANSFORM_NORMAL:
+          g_assert_not_reached ();
+        }
+      cairo_translate (cr, -0.5 * width_out, -0.5 * height_out);
+    }
+  cairo_scale (cr, scale_factor, scale_factor);
+
+  source_surface = cairo_image_surface_create_for_data (input_data,
+                                                        CAIRO_FORMAT_ARGB32,
+                                                        width_in,
+                                                        height_in,
+                                                        rowstride_in);
+
+  cairo_set_source_surface (cr, source_surface, 0, 0);
+  cairo_paint (cr);
+  cairo_destroy (cr);
+  cairo_surface_destroy (source_surface);
+
+  return target_surface;
+}
+
+static void
+load_scaled_and_transformed_cursor_sprite (MetaCursorRendererNative *native,
+                                           MetaGpuKms               *gpu_kms,
+                                           MetaCursorSprite         *cursor_sprite,
+                                           float                     relative_scale,
+                                           MetaMonitorTransform      relative_transform,
+                                           uint8_t                  *data,
+                                           int                       width,
+                                           int                       height,
+                                           int                       rowstride,
+                                           uint32_t                  gbm_format)
+{
+  cairo_surface_t *surface;
+
+  surface = scale_and_transform_cursor_sprite_cpu (data,
+                                                   width,
+                                                   height,
+                                                   rowstride,
+                                                   relative_scale,
+                                                   relative_transform);
+
+  load_cursor_sprite_gbm_buffer_for_gpu (native,
+                                         gpu_kms,
+                                         cursor_sprite,
+                                         cairo_image_surface_get_data (surface),
+                                         cairo_image_surface_get_width (surface),
+                                         cairo_image_surface_get_width (surface),
+                                         cairo_image_surface_get_stride (surface),
+                                         gbm_format);
+
+  cairo_surface_destroy (surface);
+}
+
+static void
+set_cursor_scale_and_transform (MetaCursorSprite           *cursor_sprite,
+                                float                       scale,
+                                MetaMonitorTransform        transform,
+                                MetaCursorSourceBufferType  source_buffer_type)
+{
+  MetaCursorNativePrivate *cursor_priv;
+
+  cursor_priv = get_cursor_priv (cursor_sprite);
+
+  cursor_priv->current_relative_scale = scale;
+  cursor_priv->current_relative_transform = transform;
+  cursor_priv->source_buffer_type = source_buffer_type;
+}
+
 #ifdef HAVE_WAYLAND
 static void
 realize_cursor_sprite_from_wl_buffer_for_gpu (MetaCursorRenderer      *renderer,
@@ -967,7 +1187,6 @@ realize_cursor_sprite_from_wl_buffer_for_gpu (MetaCursorRenderer      *renderer,
   MetaCursorRendererNative *native = META_CURSOR_RENDERER_NATIVE (renderer);
   MetaCursorSprite *cursor_sprite = META_CURSOR_SPRITE (sprite_wayland);
   MetaCursorRendererNativeGpuData *cursor_renderer_gpu_data;
-  uint32_t gbm_format;
   uint64_t cursor_width, cursor_height;
   CoglTexture *texture;
   uint width, height;
@@ -980,13 +1199,9 @@ realize_cursor_sprite_from_wl_buffer_for_gpu (MetaCursorRenderer      *renderer,
   if (!cursor_renderer_gpu_data || cursor_renderer_gpu_data->hw_cursor_broken)
     return;
 
-  if (is_cursor_hw_state_valid (cursor_sprite, gpu_kms))
+  if (is_cursor_hw_state_valid (renderer, cursor_sprite, gpu_kms))
     return;
 
-  texture = meta_cursor_sprite_get_cogl_texture (cursor_sprite);
-  width = cogl_texture_get_width (texture);
-  height = cogl_texture_get_height (texture);
-
   buffer = meta_cursor_sprite_wayland_get_buffer (sprite_wayland);
   if (!buffer)
     return;
@@ -995,43 +1210,59 @@ realize_cursor_sprite_from_wl_buffer_for_gpu (MetaCursorRenderer      *renderer,
   if (!buffer_resource)
     return;
 
+  ensure_cursor_priv (cursor_sprite);
+
   shm_buffer = wl_shm_buffer_get (buffer_resource);
   if (shm_buffer)
     {
       int rowstride = wl_shm_buffer_get_stride (shm_buffer);
       uint8_t *buffer_data;
+      float relative_scale;
+      MetaMonitorTransform relative_transform;
+      uint32_t gbm_format;
 
       wl_shm_buffer_begin_access (shm_buffer);
+      buffer_data = wl_shm_buffer_get_data (shm_buffer);
+
+      width = wl_shm_buffer_get_width (shm_buffer);
+      height = wl_shm_buffer_get_width (shm_buffer);
 
       switch (wl_shm_buffer_get_format (shm_buffer))
         {
-#if G_BYTE_ORDER == G_BIG_ENDIAN
         case WL_SHM_FORMAT_ARGB8888:
           gbm_format = GBM_FORMAT_ARGB8888;
           break;
         case WL_SHM_FORMAT_XRGB8888:
           gbm_format = GBM_FORMAT_XRGB8888;
           break;
-#else
-        case WL_SHM_FORMAT_ARGB8888:
-          gbm_format = GBM_FORMAT_ARGB8888;
-          break;
-        case WL_SHM_FORMAT_XRGB8888:
-          gbm_format = GBM_FORMAT_XRGB8888;
-          break;
-#endif
         default:
           g_warn_if_reached ();
           gbm_format = GBM_FORMAT_ARGB8888;
         }
 
-      buffer_data = wl_shm_buffer_get_data (shm_buffer);
-      load_cursor_sprite_gbm_buffer_for_gpu (native,
-                                             gpu_kms,
+      get_common_logical_monitors_scale (renderer,
+                                         cursor_sprite,
+                                         &relative_scale);
+
+      get_common_logical_monitors_transform (renderer,
                                              cursor_sprite,
-                                             buffer_data,
-                                             width, height, rowstride,
-                                             gbm_format);
+                                             &relative_transform);
+
+      set_cursor_scale_and_transform (cursor_sprite,
+                                      relative_scale,
+                                      relative_transform,
+                                      META_CURSOR_SOURCE_BUFFER_TYPE_SHM);
+
+      load_scaled_and_transformed_cursor_sprite (native,
+                                                 gpu_kms,
+                                                 cursor_sprite,
+                                                 relative_scale,
+                                                 relative_transform,
+                                                 buffer_data,
+                                                 width,
+                                                 height,
+                                                 rowstride,
+                                                 gbm_format);
 
       wl_shm_buffer_end_access (shm_buffer);
     }
@@ -1049,6 +1280,10 @@ realize_cursor_sprite_from_wl_buffer_for_gpu (MetaCursorRenderer      *renderer,
       cursor_width = (uint64_t) cursor_renderer_gpu_data->cursor_width;
       cursor_height = (uint64_t) cursor_renderer_gpu_data->cursor_height;
 
+      texture = meta_cursor_sprite_get_cogl_texture (cursor_sprite);
+      width = cogl_texture_get_width (texture);
+      height = cogl_texture_get_height (texture);
+
       if (width != cursor_width || height != cursor_height)
         {
           meta_warning ("Invalid cursor size (must be 64x64), falling back to software (GL) cursors\n");
@@ -1066,6 +1301,11 @@ realize_cursor_sprite_from_wl_buffer_for_gpu (MetaCursorRenderer      *renderer,
           return;
         }
 
+      set_cursor_scale_and_transform (cursor_sprite,
+                                      1.0,
+                                      META_MONITOR_TRANSFORM_NORMAL,
+                                      META_CURSOR_SOURCE_BUFFER_TYPE_EGL);
+
       set_pending_cursor_sprite_gbm_bo (cursor_sprite, gpu_kms, bo);
     }
 }
@@ -1080,25 +1320,44 @@ realize_cursor_sprite_from_xcursor_for_gpu (MetaCursorRenderer      *renderer,
   MetaCursorRendererNativeGpuData *cursor_renderer_gpu_data;
   MetaCursorSprite *cursor_sprite = META_CURSOR_SPRITE (sprite_xcursor);
   XcursorImage *xc_image;
+  float relative_scale;
+  MetaMonitorTransform relative_transform;
+
+  ensure_cursor_priv (cursor_sprite);
 
   cursor_renderer_gpu_data =
     meta_cursor_renderer_native_gpu_data_from_gpu (gpu_kms);
   if (!cursor_renderer_gpu_data || cursor_renderer_gpu_data->hw_cursor_broken)
     return;
 
-  if (is_cursor_hw_state_valid (cursor_sprite, gpu_kms))
+  if (is_cursor_hw_state_valid (renderer, cursor_sprite, gpu_kms))
     return;
 
   xc_image = meta_cursor_sprite_xcursor_get_current_image (sprite_xcursor);
 
-  load_cursor_sprite_gbm_buffer_for_gpu (native,
-                                         gpu_kms,
+  get_common_logical_monitors_scale (renderer,
+                                     cursor_sprite,
+                                     &relative_scale);
+
+  get_common_logical_monitors_transform (renderer,
                                          cursor_sprite,
-                                         (uint8_t *) xc_image->pixels,
-                                         xc_image->width,
-                                         xc_image->height,
-                                         xc_image->width * 4,
-                                         GBM_FORMAT_ARGB8888);
+                                         &relative_transform);
+
+  set_cursor_scale_and_transform (cursor_sprite,
+                                  relative_scale,
+                                  relative_transform,
+                                  META_CURSOR_SOURCE_BUFFER_TYPE_XCURSOR);
+
+  load_scaled_and_transformed_cursor_sprite (native,
+                                             gpu_kms,
+                                             cursor_sprite,
+                                             relative_scale,
+                                             relative_transform,
+                                             (uint8_t *) xc_image->pixels,
+                                             xc_image->width,
+                                             xc_image->height,
+                                             xc_image->width * 4,
+                                             GBM_FORMAT_ARGB8888);
 }
 
 static void
diff --git a/src/wayland/meta-wayland-cursor-surface.c b/src/wayland/meta-wayland-cursor-surface.c
index 76268d5f238d723c260e8129fe15112495226a02..3bcbe0b5f75847c54e7b0dd711f722c4f0ca4d75 100644
--- a/src/wayland/meta-wayland-cursor-surface.c
+++ b/src/wayland/meta-wayland-cursor-surface.c
@@ -108,6 +108,8 @@ cursor_sprite_prepare_at (MetaCursorSprite         *cursor_sprite,
                              surface->scale);
 
           meta_cursor_sprite_set_texture_scale (cursor_sprite, texture_scale);
+          meta_cursor_sprite_set_texture_transform (cursor_sprite,
+                                                    surface->buffer_transform);
         }
     }
   meta_wayland_surface_update_outputs (surface);
