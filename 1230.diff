diff --git a/src/wayland/meta-wayland-outputs.c b/src/wayland/meta-wayland-outputs.c
index 64de5abc3f2523277d5ac1291d4ebb47145cf4d1..75c29ab003027fb27b5297803717dbba604d7f4e 100644
--- a/src/wayland/meta-wayland-outputs.c
+++ b/src/wayland/meta-wayland-outputs.c
@@ -41,6 +41,7 @@
 enum
 {
   OUTPUT_DESTROYED,
+  OUTPUT_BOUND,
 
   LAST_SIGNAL
 };
@@ -338,15 +339,8 @@ bind_output (struct wl_client *client,
 #endif
 
   send_output_events (resource, wayland_output, logical_monitor, TRUE, NULL);
-}
-
-static void
-wayland_output_destroy_notify (gpointer data)
-{
-  MetaWaylandOutput *wayland_output = data;
 
-  g_signal_emit (wayland_output, signals[OUTPUT_DESTROYED], 0);
-  g_object_unref (wayland_output);
+  g_signal_emit (wayland_output, signals[OUTPUT_BOUND], 0, resource);
 }
 
 static void
@@ -468,6 +462,8 @@ make_output_inert (gpointer key,
 {
   MetaWaylandOutput *wayland_output = value;
 
+  g_signal_emit (wayland_output, signals[OUTPUT_DESTROYED], 0);
+
   wayland_output->logical_monitor = NULL;
   make_output_resources_inert (wayland_output);
 }
@@ -489,7 +485,7 @@ meta_wayland_compositor_update_outputs (MetaWaylandCompositor *compositor,
   logical_monitors =
     meta_monitor_manager_get_logical_monitors (monitor_manager);
   new_table = g_hash_table_new_full (g_int64_hash, g_int64_equal, NULL,
-                                     wayland_output_destroy_notify);
+                                     g_object_unref);
 
   for (l = logical_monitors; l; l = l->next)
     {
@@ -564,6 +560,14 @@ meta_wayland_output_class_init (MetaWaylandOutputClass *klass)
                                             0,
                                             NULL, NULL, NULL,
                                             G_TYPE_NONE, 0);
+
+  signals[OUTPUT_BOUND] = g_signal_new ("output-bound",
+                                        G_TYPE_FROM_CLASS (object_class),
+                                        G_SIGNAL_RUN_LAST,
+                                        0,
+                                        NULL, NULL, NULL,
+                                        G_TYPE_NONE, 1,
+                                        G_TYPE_POINTER);
 }
 
 static void
@@ -737,7 +741,7 @@ meta_wayland_outputs_init (MetaWaylandCompositor *compositor)
                     G_CALLBACK (on_monitors_changed), compositor);
 
   compositor->outputs = g_hash_table_new_full (g_int64_hash, g_int64_equal, NULL,
-                                               wayland_output_destroy_notify);
+                                               g_object_unref);
   compositor->outputs = meta_wayland_compositor_update_outputs (compositor, monitors);
 
   wl_global_create (compositor->wayland_display,
diff --git a/src/wayland/meta-wayland-surface.c b/src/wayland/meta-wayland-surface.c
index fa84944bdf3b8e8dbbcea5b1fb07de61d2b623db..6071afc53b78f86ee033b713fd0744ed3f204bc3 100644
--- a/src/wayland/meta-wayland-surface.c
+++ b/src/wayland/meta-wayland-surface.c
@@ -120,6 +120,11 @@ meta_wayland_surface_role_is_on_logical_monitor (MetaWaylandSurfaceRole *surface
 static MetaWaylandSurface *
 meta_wayland_surface_role_get_toplevel (MetaWaylandSurfaceRole *surface_role);
 
+static void
+set_surface_is_on_output (MetaWaylandSurface *surface,
+                          MetaWaylandOutput  *wayland_output,
+                          gboolean            is_on_output);
+
 static MetaWaylandBufferRef *
 meta_wayland_buffer_ref_new (void)
 {
@@ -1162,6 +1167,23 @@ static const struct wl_surface_interface meta_wayland_wl_surface_interface = {
   wl_surface_damage_buffer,
 };
 
+static void
+handle_output_destroyed (MetaWaylandOutput  *wayland_output,
+                         MetaWaylandSurface *surface)
+{
+  set_surface_is_on_output (surface, wayland_output, FALSE);
+}
+
+static void
+handle_output_bound (MetaWaylandOutput  *wayland_output,
+                     struct wl_resource *output_resource,
+                     MetaWaylandSurface *surface)
+{
+  if (wl_resource_get_client (output_resource) ==
+      wl_resource_get_client (surface->resource))
+    wl_surface_send_enter (surface->resource, output_resource);
+}
+
 static void
 surface_entered_output (MetaWaylandSurface *surface,
                         MetaWaylandOutput *wayland_output)
@@ -1169,6 +1191,10 @@ surface_entered_output (MetaWaylandSurface *surface,
   GList *iter;
   struct wl_resource *resource;
 
+  g_signal_connect (wayland_output, "output-destroyed",
+                    G_CALLBACK (handle_output_destroyed),
+                    surface);
+
   for (iter = wayland_output->resources; iter != NULL; iter = iter->next)
     {
       resource = iter->data;
@@ -1179,6 +1205,10 @@ surface_entered_output (MetaWaylandSurface *surface,
 
       wl_surface_send_enter (surface->resource, resource);
     }
+
+  g_signal_connect (wayland_output, "output-bound",
+                    G_CALLBACK (handle_output_bound),
+                    surface);
 }
 
 static void
@@ -1188,6 +1218,14 @@ surface_left_output (MetaWaylandSurface *surface,
   GList *iter;
   struct wl_resource *resource;
 
+  g_signal_handlers_disconnect_by_func (wayland_output,
+                                        G_CALLBACK (handle_output_destroyed),
+                                        surface);
+
+  g_signal_handlers_disconnect_by_func (wayland_output,
+                                        G_CALLBACK (handle_output_bound),
+                                        surface);
+
   for (iter = wayland_output->resources; iter != NULL; iter = iter->next)
     {
       resource = iter->data;
@@ -1200,43 +1238,23 @@ surface_left_output (MetaWaylandSurface *surface,
     }
 }
 
-static void
-set_surface_is_on_output (MetaWaylandSurface *surface,
-                          MetaWaylandOutput *wayland_output,
-                          gboolean is_on_output);
-
-static void
-surface_handle_output_destroy (MetaWaylandOutput *wayland_output,
-                               MetaWaylandSurface *surface)
-{
-  set_surface_is_on_output (surface, wayland_output, FALSE);
-}
-
 static void
 set_surface_is_on_output (MetaWaylandSurface *surface,
                           MetaWaylandOutput *wayland_output,
                           gboolean is_on_output)
 {
-  gpointer orig_id;
-  gboolean was_on_output = g_hash_table_lookup_extended (surface->outputs_to_destroy_notify_id,
-                                                         wayland_output,
-                                                         NULL, &orig_id);
+  gboolean was_on_output;
+
+  was_on_output = g_hash_table_contains (surface->outputs, wayland_output);
 
   if (!was_on_output && is_on_output)
     {
-      gulong id;
-
-      id = g_signal_connect (wayland_output, "output-destroyed",
-                             G_CALLBACK (surface_handle_output_destroy),
-                             surface);
-      g_hash_table_insert (surface->outputs_to_destroy_notify_id, wayland_output,
-                           GSIZE_TO_POINTER ((gsize)id));
+      g_hash_table_add (surface->outputs, wayland_output);
       surface_entered_output (surface, wayland_output);
     }
   else if (was_on_output && !is_on_output)
     {
-      g_hash_table_remove (surface->outputs_to_destroy_notify_id, wayland_output);
-      g_signal_handler_disconnect (wayland_output, (gulong) GPOINTER_TO_SIZE (orig_id));
+      g_hash_table_remove (surface->outputs, wayland_output);
       surface_left_output (surface, wayland_output);
     }
 }
@@ -1265,9 +1283,20 @@ update_surface_output_state (gpointer key, gpointer value, gpointer user_data)
 }
 
 static void
-surface_output_disconnect_signal (gpointer key, gpointer value, gpointer user_data)
+surface_output_disconnect_signals (gpointer key,
+                                   gpointer value,
+                                   gpointer user_data)
 {
-  g_signal_handler_disconnect (key, (gulong) GPOINTER_TO_SIZE (value));
+  MetaWaylandOutput *wayland_output = key;
+  MetaWaylandSurface *surface = user_data;
+
+  g_signal_handlers_disconnect_by_func (wayland_output,
+                                        G_CALLBACK (handle_output_destroyed),
+                                        surface);
+
+  g_signal_handlers_disconnect_by_func (wayland_output,
+                                        G_CALLBACK (handle_output_bound),
+                                        surface);
 }
 
 void
@@ -1337,8 +1366,8 @@ wl_surface_destructor (struct wl_resource *resource)
 
   meta_wayland_compositor_destroy_frame_callbacks (compositor, surface);
 
-  g_hash_table_foreach (surface->outputs_to_destroy_notify_id,
-                        surface_output_disconnect_signal,
+  g_hash_table_foreach (surface->outputs,
+                        surface_output_disconnect_signals,
                         surface);
-  g_hash_table_unref (surface->outputs_to_destroy_notify_id);
+  g_hash_table_destroy (surface->outputs);
 
@@ -1391,5 +1420,5 @@ meta_wayland_surface_create (MetaWaylandCompositor *compositor,
 
-  surface->outputs_to_destroy_notify_id = g_hash_table_new (NULL, NULL);
+  surface->outputs = g_hash_table_new (NULL, NULL);
   surface->shortcut_inhibited_seats = g_hash_table_new (NULL, NULL);
 
   meta_wayland_compositor_notify_surface_id (compositor, id, surface);
diff --git a/src/wayland/meta-wayland-surface.h b/src/wayland/meta-wayland-surface.h
index 50736758a9a48b9a23bc92409157346fe55b4ffc..1effaa47538dc1a8a6c2afd731d1f4f56c9bfff2 100644
--- a/src/wayland/meta-wayland-surface.h
+++ b/src/wayland/meta-wayland-surface.h
@@ -157,7 +157,7 @@ struct _MetaWaylandSurface
   int32_t offset_x, offset_y;
   GNode *subsurface_branch_node;
   GNode *subsurface_leaf_node;
-  GHashTable *outputs_to_destroy_notify_id;
+  GHashTable *outputs;
   MetaMonitorTransform buffer_transform;
 
   CoglTexture *texture;
